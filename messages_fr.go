package main

// BugDescriptionFr is bug description
var BugDescriptionFr = map[string]string{
	"SW_SWING_METHODS_INVOKED_IN_SWING_THREAD":    "Certaines méthodes Swing ne doivent être invoquées qu'à partir du thread Swing\n\n<p>(<a href=\"http://java.sun.com/developer/JDCTechTips/2003/tt1208.html#1\">Conseil technique JDC</a>) : les méthodes Swing <code>show()</code>, <code>setVisible()</code> et <code>pack()</code> créent les ressources associées à la fenêtre. En même temps que la création de ces ressources, le système crée le processus Swing de répartition de évènements.</p>\n<p>Ceci pose problème car le processus de répartition des évènements peut notifier des écouteurs alors que <code>pack()</code> et <code>validate()</code> sont toujours en cours de traitement. Cette situation peut conduire à ce que deux processus essayent d'accèder en même temps au composant, ce qui est une faille sérieuse qui peut provoquer des interblocages et autres problèmes de synchronisation.</p>\n<p>Un appel à <code>pack()</code> provoque l'initialisation du composant. Quand ils s'initialisent (sans être forcément visibles), les composants peuvent émettre des évènements vers le processus de répartition des évènements de Swing.</p>",
	"IL_INFINITE_LOOP":                            "Boucle apparemment inifinie\n\n<p>Cette boucle ne semble pas avoir un moyen de se terminer (autrement que, peut être, en déclenchant une exception).</p>",
	"IL_INFINITE_RECURSIVE_LOOP":                  "Boucle récursive infinie\n\n<p>Cette méthode s'appelle elle-même sans condition. Cela semble indiquer une boucle récursive infinie qui se terminera sur un débordement de la pile.</p>",
	"IL_CONTAINER_ADDED_TO_ITSELF":                "Un conteneur est ajouté à lui-même\n\n<p>Un conteneur est ajouté à lui-même. Il en résulte que le calcul du code de hachage de cet ensemble provequera une <code>StackOverflowEception</code>.</p>",
	"VO_VOLATILE_REFERENCE_TO_ARRAY":              "Une référence volatile à un tableau ne traite pas les éléments du tableau comme volatiles\n\n<p>Ceci déclare une référence volatile à un tableau, ce qui n'est peut-être pas ce que vous voulez. Avec une référence volatile à un tableau, les lectures et écritures de la référence au tableau sont traitées comme volatiles, mais les éléments ne sont pas volatiles. Pour obtenir des éléments volatiles, vous devez utiliser l'une des classes de tableaux atomiques de <code>java.util.concurrent</code> (inclus dans Java 5.0).</p>",
	"UI_INHERITANCE_UNSAFE_GETRESOURCE":           "L'utilisation de GetResource peut-être instable si la classe est étendue\n\n<p>Appeler <code>this.getClass().getResource(...)</code> peut rendre des résultats différents de ceux attendus si la classe est étendue par une classe d'un autre paquetage.</p>",
	"TESTING":                                     "Test\n\n<p>Cette alarme n'est générée que par les nouveaux détecteurs de bogues, à l'implémentation incomplète.</p>",
	"AM_CREATES_EMPTY_ZIP_FILE_ENTRY":             "Crée une entrée de fichier Zip vide\n\n<p>Le code appelle <code>putNextEntry()</code>, immédiatement suivi d'un appel à <code>closeEntry()</code>. Ceci crée une entrée de fichier Zip vide. Le contenu des entrées devrait être écrit dans le fichier Zip entre les appels à <code>putNextEntry()</code> et <code>closeEntry()</code>.</p>",
	"AM_CREATES_EMPTY_JAR_FILE_ENTRY":             "Crée une entrée de fichier Jar vide\n\n<p>Le code appelle <code>putNextEntry()</code>, immédiatement suivi d'un appel à <code>closeEntry()</code>. Ceci crée une entrée de fichier Jar vide. Le contenu des entrées devrait être écrit dans le fichier Jar entre les appels à <code>putNextEntry()</code> et <code>closeEntry()</code>.</p>",
	"IMSE_DONT_CATCH_IMSE":                        "Interception douteuse d'une IllegalMonitorStateException\n\n<p><code>IllegalMonitorStateException</code> n'est généralement déclenchée que dans le cas d'une faille dans la conception du code (appeler <code>wait()</code> ou <code>notify()</code> sur un objet dont on ne possède pas le verrou).</p>",
	"FL_MATH_USING_FLOAT_PRECISION":               "La méthode effectue des calculs en simple précision (float)\n\n<p>La méthode effectue des opérations mathématiques en simple précision (<code>float</code>). Les <code>float</code> peuvent être très imprécis. Par exemple, 16777216.0f +1.0f = 16777216.0f. Envisagez d'utiliser la double précision à la place.</p>",
	"CN_IDIOM":                                    "La classe implémente Cloneable mais ne définit et n'utilise pas la méthode clone()\n\n<p>La classe implémente <code>Cloneable</code> sans définir ou utiliser la méthode <code>clone()</code>.</p>",
	"CN_IDIOM_NO_SUPER_CALL":                      "La méthode clone() n'appelle pas super.clone()\n\n<p>Cette classe définit une méthode <code>clone()</code> qui n'appelle pas <code>super.clone()</code>, et n'est pas finale. Si cette classe (\"<i>A</i>\") est étendue par une classe fille (\"<i>B</i>\"), et que la classe fille <i>B</i> appelle <code>super.clone()</code>, alors il est probable que la méthode <code>clone()</code> de <i>B</i> retournera un objet de type <i>A</i>, ce qui viole le contrat standard de <code>clone()</code>.</p>\n<p>Si toutes les méthodes <code>clone()</code> appellent <code>super.clone()</code>, elles ont alors la garantie d'utiliser <code>Object.clone()</code>, qui retourne toujours un objet du type correct.</p>",
	"DE_MIGHT_DROP":                               "La méthode peut déclencher une exception\n\n<p>Cette méthode peut déclencher une exception. En général, les exceptions doivent être gérées ou transmises hors de la méthode.</p>",
	"DE_MIGHT_IGNORE":                             "La méthode peut ignorer une exception\n\n<p>Cette méthode peut ignorer une exception. En général, les exceptions doivent être gérées ou transmises hors de la méthode.</p>",
	"DP_DO_INSIDE_DO_PRIVILEGED":                  "Méthode invoquée alors qu'elle ne devrait l'être qu'à partir d'un block doPrivileged\n\n<p>Ce code invoque une méthode qui nécessite un test de sécurité sur les permissions. Si ce code, bien qu'ayant les droits suffisants, peut être invoqué par du code n'ayant pas les droits requis l'appel doit alors être effectué à l'intérieur d'un block <code>doPrivileged</code>.</p>",
	"DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED":  "Les chargeurs de classes ne doivent être créés qu'à partir de block doPrivileged\n\n<p>Ce code créé un chargeur de classes, ce qui nécessite un test de sécurité. Même si ce code possède des droits suffisants, la création du chargeur de classes devrait être effectuée dans un block <code>doPrivileged</code> au cas ou il serait appelé par du code ne possédant pas les droits requis.</p>",
	"JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS":    "Les champs d'une classe immuable devraient être finaux.\n\nLa classe est annotée avec <code>net.jcip.annotations.Immutable</code>, et la règle liée à cette annotation réclame que tous les champs soient marqués <code>final</code>.",
	"DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION": "La réflexion ne peut pas être utilisée pour vérifier la présence d'une annotation avec la rétention par défaut\n\n<p>A moins qu'une annotation ait elle même été annotée avec une <code>@Retention</code> différente de la rétention \"source uniquement\" par défaut, l'annotation n'est pas conservée dans le fichier .class et ne peut pas être utilisée par réflexion (par exemple avec la méthode <code>isAnnotationPresent()</code>).</p>",
	"DM_EXIT":                                                  "La méthode invoque System.exit(...)\n\n<p>Invoquer <code>System.exit()</code> arrête toute la JVM. Cela ne doit être fait que lorsque c'est nécessaire. De tels appels rendent difficile ou impossible l'invocation de votre code par d'autre code. Envisagez de déclencher une <code>RuntimeException</code> à la place.</p>",
	"DM_RUN_FINALIZERS_ON_EXIT":                                "Méthode invoquant runFinalizersOnExit, l'une des plus dangeureuses méthodes des librairies Java\n\n<p>N'appelez jamais <code>System.runFinalizersOnExit</code> ou <code>Runtime.runFinalizersOnExit</code> pour quelque raison que ce soit : elles font partie des méthodes les plus dangeureuses des librairies Java</p>\n<p>Joshua Bloch</p>",
	"DM_STRING_CTOR":                                           "La méthode invoque le constructeur inutile String(String) ; utilisez juste l'argument\n\n<p>Utiliser le constructeur <code>java.lang.String(String)</code> gaspille de la mémoire puisque l'objet ainsi construit serait fonctionnellement identique à la chaîne passée en paramètre. Utilisez juste la chaîne en argument directement.</p>",
	"DM_STRING_VOID_CTOR":                                      "La méthode invoque le constructeur inutile String() ; utilisez juste \"\"\n\n<p>Créer un nouveau objet <code>java.lang.String</code> en utilisant le constructeur sans argument gaspille de la mémoire parce que l'objet ainsi créé serait fonctionnellement identique à la constante de chaîne vide \"\". Java garantie que les chaînes constantes identiques seront représentées par le même objet <code>String</code>. C'est pourquoi vous devriez directement utiliser la constante de chaîne vide.</p>",
	"DM_STRING_TOSTRING":                                       "La méthode appel toString() sur un objet String ; utilisez directement l'objet String\n\n<p>Appeler <code>String.toString()</code> est juste une opération redondante. Utilisez directement l'objet <code>String</code>.</p>",
	"DM_GC":                                                    "Ramasse-miettes explicite ; extrêmement douteux sauf dans du code de banc d'essai\n\n<p>Le code appelle explicitement le ramasse-miettes. Mis à part l'emploi spécifique dans un banc d'essai, c'est très douteux.</p>\n<p>Dans le passé, les cas où des personnes ont explicitement invoqué le ramasse-miettes dans des méthodes telles que <code>close()</code> ou <code>finalize()</code> ont creusés des gouffres dans les performances. Le ramasse-miettes peut-être très coûteux. Toute situation qui force des centaines ou des milliers de ramasse-miettes mettra à genoux une machine.</p>",
	"DM_BOOLEAN_CTOR":                                          "La méthode invoque le constructeur inutile Boolean() ; utilisez Boolean.valueOf(...) à la place\n\n<p>Créer de nouvelles instances de <code>java.lang.Boolean</code> gaspille la mémoire puisque les objets <code>Boolean</code> sont immuables et qu'il n'y a que deux valeurs utiles de ce type. Utilisez à la place la méthode <code>Boolean.valueOf()</code> pour créer des objets <code>Boolean</code>.</p>",
	"DM_CONVERT_CASE":                                          "La méthode appelle les String.toUpperCase() ou String.toLowerCase ; utilisez plutôt la version paramètrée par une Locale\n\n<p>Une chaîne est mise en majuscules ou minuscules en fonction de jeu de caractères par défaut de la machine. Ceci peut entraîner des conversions erronées sur les caractères internationaux. Utilisez <code>String.toUpperCase(Locale l)</code> ou <code>String.toLowerCase(Locale l)</code> à la place.</p>",
	"DM_BOXED_PRIMITIVE_TOSTRING":                              "Méthode allouant une primitive boxed pour appeler toString\n\n<p>Une primitive \"boxed\" est allouée juste pour appeler <code>toString()</code>. Il est plus efficace de simplement utiliser la forme statique de <code>toString</code> qui accepte la valeur primitive. Donc,</p>\n  <table>\n     <tr><th>Remplacer...</th><th>Avec...</th></tr>\n     <tr><td><code>new Integer(1).toString()</code></td><td><code>Integer.toString(1)</code></td></tr>\n     <tr><td><code>new Long(1).toString()</code></td><td><code>Long.toString(1)</code></td></tr>\n     <tr><td><code>new Float(1.0).toString()</code></td><td><code>Float.toString(1.0)</code></td></tr>\n     <tr><td><code>new Double(1.0).toString()</code></td><td><code>Double.toString(1.0)</code></td></tr>\n     <tr><td><code>new Byte(1).toString()</code></td><td><code>Byte.toString(1)</code></td></tr>\n     <tr><td><code>new Short(1).toString()</code></td><td><code>Short.toString(1)</code></td></tr>\n     <tr><td><code>Boolean.valueOf(true).toString()</code></td><td><code>Boolean.toString(true)</code></td></tr>\n  </table>",
	"DM_NEW_FOR_GETCLASS":                                      "Méthode allouant un objet juste pour obtenir la classe\n\n<p>Cette méthode alloue un objet juste pour appeler sa méthode <code>getClass()</code> afin d'obtenir l'objet <code>Class</code> correspondant. Il est plus simple d'accèder directement à la propriété <code>.class</code> de la classe.</p>",
	"DM_MONITOR_WAIT_ON_CONDITION":                             "Wait() appelé sur une Condition\n\n<p>Cette méthode appelle <code>wait()</code> sur un objet <code>java.util.concurrent.locks.Condition</code>. L'attente d'une <code>Condition</code> devrait être faite en utilisant l'une des méthodes <code>await()</code> définies dans l'interface <code>Condition</code>.</p>",
	"RV_01_TO_INT":                                             "Les valeurs aléatoires entre 0 et 1 sont réduites à l'entier 0\n\n<p>Une valeur aléatoire comprise entre 0 et 1 est réduite à la valeur entière 0. Vous souhaitez probablement multiplier cette valeur aléatoire par quelque chose avant de la réduire à un entier, ou utiliser la méthode <code>Random.nextInt(n)</code>.</p>",
	"DM_NEXTINT_VIA_NEXTDOUBLE":                                "Utiliser la méthode nextInt de Random plutôt que nextDouble pour générer un entier aléatoire\n\n<p>Si <code>r</code> est un <code>java.util.Random</code>, vous pouvez générer un nombre aléatoire entre 0 et n-1 en utilisant <code>r.nextInt(n)</code> plutôt que <code>(int)(r.nextDouble() * n)</code>.</p>",
	"SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE":                 "Une chaîne non constante est passée à la méthode execute d'une commande SQL\n\n<p>Cette méthode invoque la méthode <code>execute</code> d'une commande SQL (statement) avec une chaîne qui semble générée dynamiquement. Préférer la préparation de la commande avec un <code>PreparedStatement</code>, c'est plus efficace et bien moins vulnérable aux attaques par injection SQL (insertion de code SQL malveillant au sein d'une requête).</p>",
	"SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING": "Une requète est préparée à partir d'une chaine non constante\n\n<p>Ce code créé une requète SQL préparée à partir d'une chaine non constante. Les données qui permettent de construire cette chaine venant de l'utilisateur, elles pourraient, sans vérification, servir à faire de l'injection de SQL et ainsi modifier la requète afin qu'elle produise des résultats inattendus et indésirables.</p>",
	"DM_USELESS_THREAD":                                        "Thread créé avec la méthode run vide par défaut\n\n<p>Cette méthode crée un thread sans spécifier de méthode <code>run</code>, soit par dérivation de la classe <code>Thread</code>, soit en transmettant un objet <code>Runnable</code>. Ce thread ne fait donc rien sauf perdre du temps.</p>",
	"DC_DOUBLECHECK":                                           "Possible double vérification d'un champ\n\n<p>Cette méthode contient peut-être une instance de verrou par double vérification. Cet idiome n'est pas correct vis-à-vis de la sémantique du modèle de mémoire Java. Pour plus d'informations, cf. la page <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>",
	"FI_PUBLIC_SHOULD_BE_PROTECTED":                            "Un finaliseur devrait être protégé, pas public\n\n<p>La méthode <code>finalize()</code> d'une classe devrait avoir un accès protégé, pas public.</p>",
	"FI_EMPTY":                                                 "Un finaliseur vide devrait être supprimé\n\n<p>Les méthodes <code>finalize()</code> vides sont inutiles, donc elles devraient être supprimées.</p>",
	"FI_NULLIFY_SUPER":                                         "Un finaliseur rend inutile celui de sa super-classe\n\n<p>Cette méthode <code>finalize()</code> vide rend explicitement inutile tout finaliseur défini dans les super-classes. Toute action définie dans un finaliseur d'une superclasse sera ignorée. A moins que cela ne soit voulu, supprimer cette méthode.</p>",
	"FI_USELESS":                                               "Le finaliseur ne fait rien sauf appeler celui de la super-classe\n\n<p>La seule chose que cette méthode <code>finalize()</code> fait est d'appeler la méthode <code>finalize()</code> de la super-classe, ce qui la rend redondante. Supprimez la.</p>",
	"FI_MISSING_SUPER_CALL":                                    "Le finaliseur n'appelle pas le finaliseur de la super-classe\n\n<p>Cette méthode <code>finalize()</code> n'appelle pas la méthode <code>finalize()</code> de sa classe mère ; donc toutes les actions définies au niveau de la classe mère seront ignorées. Ajoutez un appel à <code>super.finalize()</code>.</p>",
	"FI_EXPLICIT_INVOCATION":                                   "Invocation explicite d'un finaliseur\n\n<p>Cette méthode contient un appel explicite à la méthode <code>finalize()</code> d'un objet. Les méthodes <code>finalize()</code> étant sensées n'être appelées qu'une fois, et uniquement par la JVM, c'est une mauvaise idée.</p>",
	"EQ_SELF_USE_OBJECT":                                       "Définition d'une méthode equals() covariante, Object.equals(Object) est hérité\n\n<p>Cette classe définit une version covariante de la méthode <code>equals()</code>, mais appelle la méthode normale <code>equals(Object)</code> définie dans la classe de base <code>java.lang.Object</code>. La classe devrait probablement définir une version non covariante de <code>equals()</code>. (C'est-à-dire une méthode avec la signature <code>boolean equals(java.lang.Object)</code>.</p>",
	"EQ_SELF_NO_OBJECT":                                        "Définition d'une méthode equals() covariante\n\n<p>Cette classe définit une version covariante de <code>equals()</code>. Pour surcharger correctement la méthode <code>equals()</code> de <code>java.lang.Object</code>, le paramètre de <code>equals()</code> doit être du type <code>java.lang.Object</code>.</p>",
	"NP_ARGUMENT_MIGHT_BE_NULL":                                "Méthode ne testant pas les paramètres à null\n\n<p>Un paramètre de cette méthode a été identifié comme une valeur pouvant être à <code>null</code>, mais qui est déréférencée sans test de nullité.</p>",
	"NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT":                    "Méthode equals() ne vérifiant pas la nullité\n\n<p>Cette implémentation de <code>equals(Object)</code> ne respecte pas le contrat défini par <code>java.lang.Object.equals()</code> car elle ne vérifie la nullité du paramètre reçu en argument. Toutes les méthodes <code>equals()</code> doivent renvoyer <code>false</code> quand elles reçoivent une valeur à <code>null</code>.</p>",
	"NP_DOES_NOT_HANDLE_NULL":                                  "Méthode equals() ne vérifiant pas le null\n\n<p>Cette implémentation de <code>equals(Object)</code> contredit le contrat défini dans <code>java.lang.Object.equals()</code> car elle ne vérifie pas le cas du <code>null</code> passé en paramètre. Toutes les méthodes <code>equals()</code> devraient renvoyer <code>false</code> quand un <code>null</code> leur est passé.</p>",
	"CO_SELF_NO_OBJECT":                                        "Définition d'une méthode compareTo() covariante\n\n<p>Cette classe définit une version covariante de <code>compareTo()</code>. Pour correctement surcharger la méthode <code>compareTo() </code>de l'interface <code>Comparable</code>, le paramètre de <code>compareTo()</code> doit être du type <code>java.lang.Object</code>.</p>",
	"HE_HASHCODE_USE_OBJECT_EQUALS":                            "La classe définit hashCode() et utilise Object.equals()\n\n<p>Cette classe définit une méthode <code>hashCode()</code> mais hérite la méthode <code>equals()</code> de <code>java.lang.Object</code> (qui définit l'égalité par comparaison des références des objets). Bien que cela satisfasse certainement le contrat indiquant que les objets égaux doivent avoir des codes de hachage égaux, ce n'est certainement pas ce qui était voulu lors de la surcharge de la méthode <code>hashCode()</code> (Surcharger <code>hashCode()</code> implique que l'identité des objets soit basée sur des critères plus compliqués qu'une simple égalités des références.)</p>\n<p>Si vous ne pensez pas que des instances de cette classe soient un jour insérées dans des <code>HashMap</code>/<code>HashTable</code>, l'implémentation recommendée de <code>hashCode</code> est :</p>\n<pre><code>\npublic int hashCode() {\n  assert false : \"hashCode not designed\";\n  return 42; // any arbitrary constant will do \n  }\n</code></pre>",
	"HE_HASHCODE_NO_EQUALS":                                    "La classe définit hashCode() mais pas equals()\n\n<p>Cette classe définit une méthode <code>hashCode()</code> mais pas de méthode <code>equals()</code>. C'est pourquoi cette classe peut violer le contrat indiquant que des objets identiques doivent avoir des codes de hachage identiques.</p>",
	"HE_EQUALS_USE_HASHCODE":                                   "La classe définit equals() et utilise Object.hashCode()\n\n<p>Cette classe surcharge <code>equals(Object)</code>, pas <code>hashCode()</code>, et hérite de l'implémentation de <code>hashCode()</code> issue de <code>java.lang.Object</code> (qui renvoie le code de hachage d'identité, une valeur arbitraire assignée à l'objet par la JVM). C'est pourquoi la classe a des chances de violer le contrat impliquant que des objets égaux doivent avoir des codes de hachage identiques.</p>\n<p>Si vous ne pensez pas que des instances de cette classe soient un jour insérés dans des<code>HashMap</code>/<code>Hashtable</code>, l'implémentation recommendée est du type :</p>\n<pre><code>\npublic int hashCode() {\n  assert false : \"hashCode not designed\";\n  return 42; // any arbitrary constant will do \n}\n</code></pre>",
	"HE_INHERITS_EQUALS_USE_HASHCODE":                          "La classe hérite de equals() et utilise Object.hashCode()\n\n<p>Cette classe hérite de la méthode <code>equals((Object)</code> d'une super-classe abstraite, et de la méthode <code>hashCode()</code> de l'objet <code>java.lang.Object</code> (qui renvoi le code de hachage d'identité, une valeur arbitraire assignée à l'objet par la JVM). C'est pourquoi la classe viole probablement le contrat indiquant que des objets égaux doivent avoir des codes de hachage identiques.</p>\n<p>Si vous ne souhaitez pas définir une méthode <code>hashCode()</code> et/ou ne pensez pas que l'objet puisse un jour être mis dans des <code>HashMap</code>/<code>Hashtable</code>, définissez une méthode <code>hashCode()</code> déclenchant une <code>UnsupportedOperationException</code>.</p>",
	"HE_EQUALS_NO_HASHCODE":                                    "La classe définit equals() mais pas hashCode()\n\n<p>Cette classe surcharge <code>equals(Object)</code>, mais pas <code>hashCode()</code>. C'est pourquoi la classe peut violer le contrat indiquant que des objets égaux doivent avoir des codes de hachage identiques.</p>",
	"EQ_ABSTRACT_SELF":                                         "Une classe abstraite définit une méthode equals() covariante\n\n<p>Cette classe définit une version covariante de la méthode <code>equals()</code>. Pour surcharger correctement la méthode <code>equals()</code> de <code>java.lang.Object</code>, le paramètre de <code>equals()</code> doit être du type <code>java.lang.Object</code>.</p>",
	"ES_COMPARING_STRINGS_WITH_EQ":                             "Comparaison d'objets String utilisant == ou !=\n\n<p>Ce code compare des objets <code>java.lang.String</code> au moyen de l'égalité par référence des opérateurs <code>==</code> ou <code>!=</code>. A moins que les deux chaînes ne soient des constantes dans le fichier source ou aient été internalisées au moyen de la méthode <code>String.intern()</code>, deux chaînes identiques peuvent être représentées par deux objets <code>String</code> différents. Envisagez d'utiliser la méthode <code>equals(Object)</code> à la place.</p>",
	"CO_ABSTRACT_SELF":                                         "Une classe abstraite définit une méthode compareTo() covariante\n\n<p>Cette classe définit une version covariante de <code>compareTo()</code>. Pour surcharger correctement la méthode <code>compareTo()</code> de l'interface <code>Comparable</code>, le paramètre de <code>compareTo()</code> doit être du type <code>java.lang.Object</code>.</p>",
	"IS_FIELD_NOT_GUARDED":                                     "Champ non protégé contre les accès concurrents\n\n<p>Ce champ est annoté avec <code>net.jcip.annotations.GuardedBy</code>, mais peut être utilisé d'une façon qui contredit l'annotation.</p>",
	"IS2_INCONSISTENT_SYNC":                                    "Synchronisation incohérente\n\n<p>Les champs de cette classe semblent être accédés de façon incohérente vis-à-vis de la synchronisation. Le détecteur de bogue juge que :</p>\n<ol>\n  <li>la classe contient un mélange d'accès verrouillés et non verrouillés,</li>\n  <li>au moins un des accès verrouillés est effectué par une des propres méthodes de la classe,</li>\n  <li>le nombre d'accès (lectures et écritures) non synchronisés ne représente pas plus d'un tiers de tous les accès, avec plus de deux fois plus d'écritures que de lectures.</li>\n</ol>\n<p>Un bogue typique déclenchant ce détecteur est l'oubli de la synchronisation sur l'une des méthodes d'une classe qui essaye d'être sûre vis-à-vis des threads.</p>\n<p>Vous pouvez sélectionner les noeuds nommés \"Accès non synchronisés\" pour avoir la position exacte dans le code où le détecteur pense qu'un champ est accédé sans synchronisation.</p>\n<p>Notez qu'il y a diverses sources d'inexactitude dans ce détecteur ; par exemple, le détecteur ne peut pas repérer statiquement toutes les situations dans lesquelles un verrou est obtenu. En fait, même lorsque le détecteur repère effectivement des accès avec et sans verrou, le code concerné peut quand même être correct.</p>\n<p>Cette description se réfère à la version \"IS2\" du détecteur, qui est plus précise pour détecter les accès avec et sans verrous que l'ancien détecteur \"IS\".</p>",
	"NN_NAKED_NOTIFY":                                          "Appel notify() isolé dans une méthode\n\n<p>Un appel à <code>notify()</code> ou <code>notifyAll()</code> est effectué sans aucun changement (apparent) de l'état d'un objet modifiable. En général, appeler une méthode <code>notify()</code> dans un moniteur est effectué parce qu'une condition quelconque attendue par un autre thread est devenue vraie. Dans tous les cas, pour que la condition ait un sens, elle doit porter sur un objet visible des deux threads.</p>\n<p>Ce bogue n'indique pas nécessairement une erreur puisque la modification de l'état de l'objet peut avoir eu lieu dans une méthode qui appelle la méthode contenant la notification.</p>",
	"MS_EXPOSE_REP":                                            "Une méthode statique publique risque d'exposer une représentation interne en renvoyant un tableau\n\n<p>Une méthode statique publique renvoit une référence à un tableau faisant partie de l'état statique de la classe. Tout code appelant cette méthode peut librement modifier le tableau sous-jacent. Une correction possible serait de renvoyer une copie du tableau.</p>",
	"EI_EXPOSE_REP":                                            "Une méthode peut exposer sa représentation interne en renvoyant une référence à un objet modifiable\n\n<p>Renvoyer une référence à un objet modifiable stocké dans les champs d'un objet expose la représentation interne de l'objet. Si des instances sont accédées par du code non fiable, et que des modifications non vérifiées peuvent compromettre la sécurité ou d'autres propriétés importantes, vous devez faire autre chose. Renvoyer une nouvelle copie de l'objet est une meilleur approche dans de nombreuses situations.</p>",
	"EI_EXPOSE_REP2":                                           "Une méthode expose sa représentation interne en incorporant une référence à un objet modifiable\n\n<p>Ce code stocke une référence à un objet externe modifiable dans la représentation interne de l'objet. Si des instances sont accédées par du code non fiable, et que des modifications non vérifiées peuvent compromettre la sécurité ou d'autres propriétés importantes, vous devez faire autre chose. Stocker une copie de l'objet est une meilleur approche dans de nombreuses situations.</p>",
	"EI_EXPOSE_STATIC_REP2":                                    "Une méthode peut exposer un état interne statique en stockant un objet modifiable dans un champs statique\n\n<p>Ce code stocke une référence à un objet modifiable externe dans un champs statique. Si des modifications non vérifiées de l'objet modifiable peuvent compromettre la sécurité ou d'autres propriétés importantes, vous devez faire autre chose. Stocker une copie de l'objet est souvent une meilleur approche.</p>",
	"RU_INVOKE_RUN":                                            "Invocation de run() sur un thread (Vouliez-vous plutôt dire start() ?)\n\n<p>Cette méthode appelle explicitement <code>run()</code> sur un objet. En général, les classes implémentent l'interface <code>Runnable</code> parce qu'elles vont avoir leur méthode <code>run()</code> invoquée dans un nouveau thread, auquel cas <code>Thread.start()</code> est la bonne méthode à appeler.</p>",
	"SP_SPIN_ON_FIELD":                                         "Méthode bouclant sur un champ\n\n<p>Cette méthode tourne en rond sur une boucle qui lit un champ. Le compilateur est autorisé à sortir la lecture de la boucle, créant ainsi une boucle infinie. La classe devrait être modifiée afin d'être correctement synchronisée (avec des appels à <code>wait()</code> et <code>notify()</code>).</p>",
	"NS_NON_SHORT_CIRCUIT":                                     "Utilisation discutable de logique binaire\n\n<p>Ce code semble utiliser de la logique binaire (Ex. : <code>&amp;</code> ou <code>|</code>) plutôt que les opérateurs booléens (<code>&amp;&amp;</code> ou <code>||</code>). La logique binaire entraîne l'évaluation systématique de toute l'expression, même quand le résultat pourrait être immédiatement déduit. Ceci est moins performant et peut provoquer des erreurs lorsque la partie gauche de l'expression masque des cas de la partie droite.</p>",
	"TLW_TWO_LOCK_WAIT":                                        "wait() avec deux verrous en attente\n\n<p>Attendre sur on moniteur alors que deux verrous sont détenus peut entraîner un blocage fatal (deadlock). Exécuter un <code>wait()</code> ne libère que le verrou sur l'objet accueillant le <code>wait()</code>, mais aucun autre verrou. Ce n'est pas obligatoirement un bogue, mais il vaut mieux examiner ça en détails.</p>",
	"TLW_TWO_LOCK_NOTIFY":                                      "Notify avec deux verrous en cours\n\n<p>Le code appelle <code>notify()</code> ou <code>notifyAll()</code> alors que deux verrous sans en cours. Si cette notification tente de réveiller un <code>wait()</code> basé sur les mêmes verrous cela peut provoquer un inter-blocage puisque le <code>wait()</code> ne libérera qu'un des verrous et que le <code>notify()</code> ne pourra pas récupérer l'autre verrou et échouera. Si il y a aussi une alarme sur un <code>wait()</code> avec deux verrous, la probabilité d'une erreur est plutôt élevée.</p>",
	"UW_UNCOND_WAIT":                                           "Méthode contenant un wait() non conditionné\n\n<p>Cette méthode contient un appel à <code>java.lang.Object.wait()</code> qui n'est pas protégé par une condition. Si la condition que la méthode essaye d'attendre a déjà été remplie, le thread risque d'attendre indéfiniment.</p>",
	"UR_UNINIT_READ":                                           "Lecture d'un champ non initialisé dans un constructeur\n\n<p>Ce constructeur lit un champ qui n'a pas encore été initialisé. Une des causes les plus fréquentes est l'utilisation accidentelle par le développeur du champ au lieu d'un des paramètres du constructeur.</p>",
	"UG_SYNC_SET_UNSYNC_GET":                                   "Méthode getXXX non synchronisée, méthode setXXX synchronisée\n\n<p>Cette classe contient des méthodes <code>getXXX</code> et <code>setXXX</code> similaires dont la méthode <code>setXXX</code> est synchronisée tandis que la méthode <code>getXXX</code> ne l'est pas. Ceci peut entraîner un comportement incorrect à l'exécution car l'appelant de la méthode <code>getXXX</code> ne verra pas obligatoirement l'objet dans un état consistant. La méthode <code>getXXX</code> devrait être synchronisée.</p>",
	"IC_INIT_CIRCULARITY":                                      "Initialisation circulaire\n\n<p>Une initialisation circulaire a été détectée dans les initialisations de variables statiques de deux classes référencées par l'instance en erreur. De nombreuses sortes de comportements inattendus peuvent surgir d'une telle situation.</p>",
	"IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION":        "Classe mère utilisant une sous-classe durant son initialisation\n\n<p>Durant l'intialisation, une classe utilise activement l'une de ses sous-classes. Cette sous-classe ne sera pas encore initialisée lors de la première utilisation. Par exemple, dans le code suivant, <code>foo</code> sera à <code>null</code>.</p>\n<pre><code>\npublic class CircularClassInitialization {\n    static class InnerClassSingleton extends CircularClassInitialization {\n        static InnerClassSingleton singleton = new InnerClassSingleton();\n    }\n    static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n</code></pre>",
	"IT_NO_SUCH_ELEMENT":                                       "La méthode next() de Iterator ne peut pas déclencher une exception NoSuchElement\n\n<p>Cette classe implémente l'interface <code>java.util.Iterator</code>. Néanmoins, sa méthode <code>next()</code> n'est pas capable de déclencher <code>java.util.NoSuchElementException</code>. La méthode <code>next()</code> devrait être modifiée pour déclencher <code>NoSuchElementException</code> si elle est appelée alors qu'il n'y a plus d'éléments à renvoyer.</p>",
	"ESync_EMPTY_SYNC":                                         "Bloc synchronisé vide\n\n<p>Présence d'un bloc synchronisé vide:</p>\n<pre><code>\nsynchronized() {}\n</code></pre>\n<p>L'utilisation de blocs synchronisés vides est bien plus subtile et dure à réaliser correctement que bien des gens ne le reconnaissent, et de plus ne correspond que rarement à la meilleure des solutions.</p>",
	"IS_INCONSISTENT_SYNC":                                     "Synchronisation incohérente\n\n<p>Les champs de cette classe semblent être accédés de façon incohérente vis-à-vis de la synchronisation. Le détecteur indique que :</p>\n<ol>\n  <li>la classe mélange les accès verrouillés et non verrouillés,</li>\n  <li>au moins des accès verrouillés est effectué par l'une des propres méthodes de la classe,</li>\n  <li>le nombre d'accès non synchronisés à un champ (lectures et écritures) ne dépasse pas un tiers de l'ensemble des accès, les écritures étant deux fois plus présentes que les lectures.</li>\n</ol>\n  <p>Typiquement, oublier de synchroniser une des méthodes dans une classe essayant d'être sûre vis-à-vis des threads est un bogue signalé par ce détecteur.</p>\n<p>NB : il y a diverses sources d'inexactitude dans ce détecteur ; par exemple, le détecteur ne peut pas déterminer statiquement toutes les situations dans lesquelles un verrou est détenu. Ainsi, même lorsque le détecteur repère effectivement des accès verrouillés / non verrouillés, le code en question peut tout de même être correct.</p>",
	"ML_SYNC_ON_UPDATED_FIELD":                                 "La méthode se synchronise sur un champ mis à jour\n\n<p>Cette méthode se synchronise sur le champ modifiable d'une référence objet. Il y a peu de chances que cela ait un sens puisque les différents threads se synchroniserons par rapport à différents objets.</p>",
	"MS_OOI_PKGPROTECT":                                        "Le champ devrait être sorti de l'interface et mis en package protected\n\n<p>Un champ final static défini dans une interface référence un objet modifiable tel qu'un tableau ou une table de hachage. Cet objet pourrait être modifié par accident ou par du code sournois d'un autre paquetage. Pour résoudre cela et éviter cette vulnérabilité, le champ doit être intégré dans une classe et sa visibilité modifiée en package protected.</p>",
	"MS_FINAL_PKGPROTECT":                                      "Le champ devrait être à la fois final et package protected\n\n<p>Un champ statique modifiable peut-être changé par accident ou par du code malveillant d'un autre paquetage. Le champ devrait être package protected et/ou final pour éviter cette vulnérabilité.</p>",
	"MS_SHOULD_BE_FINAL":                                       "Un champ n'est pas final alors qu'il devrait l'être\n\n<p>Un champ statique modifiable peut-être changé par accident ou par du code malveillant d'un autre paquetage. Le champ devrait être final pour éviter cette vulnérabilité.</p>",
	"MS_PKGPROTECT":                                            "Un champ devrait être package protected\n\n<p>Un champ statique modifiable peut-être changé par accident ou par du code malveillant d'un autre paquetage. Le champ devrait être package protected pour éviter cette vulnérabilité.</p>",
	"MS_MUTABLE_HASHTABLE":                                     "Un champ modifiable est une Hashtable\n\n<p>Le champ est une référence final static à une <code>Hashtable</code> et peut-être modifié par accident ou par du code malveillant d'un autre paquetage. Ce code peut librement modifier le contenu de la <code>Hashtable</code>.</p>",
	"MS_MUTABLE_ARRAY":                                         "Un champ est un tableau modifiable\n\n<p>Le champ est une référence final static à un tableau et peut-être modifié par accident ou par du code malveillant d'un autre paquetage. Ce code peut librement modifier le contenu du tableau.</p>",
	"MS_CANNOT_BE_FINAL":                                       "Un champ n'est pas final et ne peut pas être protégé face à du code malveillant\n\n<p>Un champ statique modifiable peut-être modifié par accident ou par du code malveillant. Malheureusement, la façon dont ce champ est utilisé ne permet une correction aisée de ce problème.</p>",
	"IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD":     "Appel ambigu d'une méthode hérité ou externe\n\n<p>Une classe interne invoque une méthode qui peut être résolue comme une méthode héritée ou comme une méthode définie dans une classe externe. La sémantique de Java fait qu'elle sera résolue en invoquant la méthode héritée, mais ce n'est peut être pas votre intention. Si vous souhaitez réellement invoquer la méthode héritée, faite le en utilisant <code>super</code> (Ex : appelé <code>super.foo(17)</code>) ce qui clarifiera votre code pour les autres lecteurs et pour FindBugs.</p>",
	"NM_CLASS_NAMING_CONVENTION":                               "Nom de classe devant commencer par une majuscule\n\n<p>Les noms de classe doivent être en minuscules avec la première lettre de chaque mot en majuscules. Essayez de conserver vos noms de classes simples et explicites. Utilisez des mots entiers et évitez acronymes et abbréviations (à moins que l'abbréviation soit plus largement utilisée que la forme longue, comme \"URL\" ou \"HTML\").</p>",
	"NM_METHOD_NAMING_CONVENTION":                              "Nom de méthode devant commencer par une minuscule\n\n<p>Les noms de méthodes devraient être des verbes en minuscules, avec la première lettre des mots, après le premier, en majuscules.</p>",
	"NM_FIELD_NAMING_CONVENTION":                               "Nom de champ devant commencer par une minuscule\n\n<p>Les noms de champs qui ne sont pas finaux devraient être en minuscules avec la première lettre des mots, après le premier, en majuscule.</p>",
	"NM_VERY_CONFUSING":                                        "Noms de méthodes très ambigus\n\n<p>Les méthodes indiquées ont des noms qui ne diffèrent que par les majuscules. C'est d'autant plus ambigu que les classes comportant ces méthodes sont liées par héritage.</p>",
	"NM_CONFUSING":                                             "Noms de méthodes ambigus\n\n<p>Les méthodes indiquées ont des noms qui ne diffèrent que par les majuscules.</p>",
	"NM_METHOD_CONSTRUCTOR_CONFUSION":                          "Confusion apparente entre une méthode et un constructeur\n\n<p>Cette méthode a le même nom que la classe dans laquelle elle est déclarée. Il est probable qu'elle devait être un constructeur.\nSi c'est bien le cas, retirez la déclaration d'une valeur de retour.</p>",
	"NM_LCASE_HASHCODE":                                        "La classe définit hashcode() ; ne devrait-ce pas être hashCode() ?\n\n<p>Cette classe définit une méthode nommée <code>hashcode()</code>. Cette méthode ne surcharge pas la méthode <code>hashCode()</code> de <code>java.lang.Object</code>, surchage qui était pourtant sans doute le but visé.</p>",
	"NM_LCASE_TOSTRING":                                        "La classe définit tostring() ; ne devrait-ce pas être toString() ?\n\n<p>Cette classe définit une méthode appelée <code>tostring()</code>. Cette méthode ne surcharge pas la méthode <code>toString()</code> de <code>java.lang.Object</code>, surchage qui était pourtant sans doute le but visé.</p>",
	"NM_BAD_EQUAL":                                             "La classe définit equal() ; ne devrait-ce pas être equals() ?\n\n<p>Cette classe définit une méthode <code>equal(Object)</code>. Cette méthode ne surcharge pas la méthode <code>equals(Object)</code> de <code>java.lang.Object</code>, surchage qui était pourtant sans doute le but visé.</p>",
	"NM_CLASS_NOT_EXCEPTION":                                   "Cette classe ne dérive pas d'Exception, même si son nom le sous-entend\n\n<p>Cette classe n'est pas dérivée d'une autre <code>Exception</code> alors que son nom se termine par 'Exception'. Ceci risque de porter à confusion les utilisateurs de cette classe.</p>",
	"RR_NOT_CHECKED":                                           "La méthode ignore le résultat de InputStream.read()\n\n<p>Cette méthode ignore le code retour d'une des variantes de <code>java.io.InputStream.read()</code> qui peut renvoyer de multiples octets. Si la valeur renvoyée n'est pas vérifiée, l'appelant ne sera pas capable de gérer correctement le cas ou moins d'octets que prévu auront été lus. C'est un bogue particulièrement insidieux car dans la plupart des programmes les lectures renvoient effectivement souvent le nombre d'octets demandé, les plantages restant sporadiques.</p>",
	"SR_NOT_CHECKED":                                           "La méthode ignore le résultat de InputStream.skip()\n\n<p>Cette méthode ignore la valeur renvoyée par <code>java.io.InputStream.skip()</code>, qui peut sauter de multiples octets. Si la valeur renvoyée n'est pas vérifiée, l'appelant n'est pas capable de gérer correctement les cas ou moins d'octets que prévu auront été sautés. C'est un type de bogue particulièrement insidieux car la plupart du temps le bon nombre d'octet sera effectivement sauté, et les plantages seront sporadiques. Néanmoins, sur les flux bufferisés, <code>skip()</code> ne s'applique qu'aux données du buffer et échoue fréquemment à sauter le nombre d'octets demandé.</p>",
	"SE_READ_RESOLVE_MUST_RETURN_OBJECT":                       "La méthode readResolve doit retourner un Object\n\n<p>Pour que la méthode <code>readResolve</code> soit prise en compte pas le mécanisme de sérialisation, elle doit avoir Object comme type de retour.</p>",
	"SE_TRANSIENT_FIELD_NOT_RESTORED":                          "Champ \"transient\" non positionné lors de la désérialisation\n\n<p>Cette classe contient un champ qui est mis-à-jour à de nombreux endrois dans la classe, et qui semble faire parti du démarrage de la classe. Mais, ce champ étant marqué comme <code>transient</code> et n'étant pas alimenté par les méthodes <code>readObject</code> et <code>readResolve</code>, il contiendra la valeur par défaut dans toutes les instances désérialisées de la classe.</p>",
	"SE_METHOD_MUST_BE_PRIVATE":                                "Méthode devant être privée pour que la sérialisation fonctionne\n\n<p>Cette classe implémente l'interface <code>Serializable</code> et défini une méthode pour personnaliser la sérialisation/désérialisation. Mais cette méthode n'étant pas déclarée privée elle sera ignorée silencieusement par les API de sérialisation/désérialisation.</p>",
	"SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION":           "La classe est Externalizable mais ne définit pas de constructeur par défaut\n\n<p>Cette classe implémente l'interface <code>Externalizable</code>, mais ne définit pas de constructeur par défaut. Quand les objets <code>Externalizable</code> sont déserialisés, ils doivent d'abord être construit au moyen du constructeur par défaut. Cette classe n'en ayant pas, sérialisation et désérialisation échoueront à l'exécution.</p>",
	"SE_NO_SUITABLE_CONSTRUCTOR":                               "La classe est Serializable mais sa super-classe ne possède pas de constructeur par défaut visible\n\n<p>Cette classe implémente l'interface <code>Serializable</code> mais pas sa super-classe. Quand un tel objet est désérialisé, les champs de la classe mère doivent être initialisés en invoquant le constructeur par défaut de la super-classe. Comme la super-classe n'en a pas, sérialisation et désérialisation échoueront à l'exécution.</p>",
	"SE_NO_SERIALVERSIONID":                                    "La classe est Serializable, mais ne définit pas serialVersionUID\n\n<p>Cette classe implémente l'interface <code>Serializable</code> mais ne définit pas de champ <code>serialVersionUID</code>. Une modification aussi simple qu'ajouter une référence vers un objet <code>.class</code> ajoutera des champs synthétiques à la classe, ce qui malheureusement changera la valeur implicite de <code>serialVersionUID</code> (Ex. : ajouter une référence à <code>String.class</code> générera un champ statique <code>class$java$lang$String</code>). De plus, différents compilateurs source vers bytecode peuvent utiliser différentes conventions de nommage pour les variables synthétiques générées pour référencer les objets classes et les classes internes. Afin de garantir l'interopérabilité de <code>Serializable</code> suivant les versions, pensez à ajouter un champ <code>serialVersionUID</code> explicite.</p>",
	"SE_COMPARATOR_SHOULD_BE_SERIALIZABLE":                     "Comparateur n'implémentant pas Serializable\n\n<p>Cette classe implémente l'interface <code>Comparator</code>. Vous devriez vérifier si elle doit ou pas également implémenter l'interface <code>Serializable</code>. Si un comparateur est utilisé pour construire une collection triée, telle que <code>TreeMap</code>, alors le <code>TreeMap</code> ne sera sérialisable uniquement si le compareteur l'est aussi. Puisque la plupart des comparateurs ont de petits voire aucun états, les rendre sérialisables est généralement une technique de programmation défensive simple et bénéfique.</p>",
	"SF_SWITCH_FALLTHROUGH":                                    "Un switch comporte un cas qui déborde sur le suivant\n\n<p>Cette méthode contient un <code>switch</code> dont l'un des cas déborde sur le suivant. Normalement, vous devez terminer chaque cas avec une instruction <code>break</code> ou <code>return</code>.</p>",
	"WS_WRITEOBJECT_SYNC":                                      "Seule la méthode writeObject() est synchronisée\n\n<p>Cette classe a une méthode <code>writeObject()</code> qui est synchronisée ; mais aucune autre méthode de cette classe n'est synchronisée.</p>",
	"RS_READOBJECT_SYNC":                                       "Seule la méthode readObject() est synchronisée\n\n<p>Cette classe <code>Serializable</code> définit une méthode <code>readObject()</code> qui est synchronisée. Par définition, un objet créé par désérialisation n'est accessible que par un unique thread, donc il n'y a aucun intérêt à synchroniser <code>readObject()</code>. Si la méthode <code>readObject()</code> en elle-même rend l'objet visible d'un autre thread, vous avez un exemple de style de code très douteux.</p>",
	"SE_NONSTATIC_SERIALVERSIONID":                             "serialVersionUID n'est pas static\n\n<p>Cette classe définit un champ <code>serialVersionUID</code> qui n'est pas statique. Le champ devrait être rendu statique si son but est de préciser l'identifiant de version utilisé pour la sérialisation.</p>",
	"SE_NONFINAL_SERIALVERSIONID":                              "serialVersionUID n'est pas final\n\n<p>Cette classe définit un champ <code>serialVersionUID</code> qui n'est pas <code>final</code>. Ce champ devrait être rendu <code>final</code> si son but est de préciser l'identifiant de version utilisé pour la sérialisation.</p>",
	"SE_NONLONG_SERIALVERSIONID":                               "serialVersionUID n'est pas de type long\n\n<p>Cette classe définit un champ <code>serialVersionUID</code> qui n'est pas de type <code>long</code>. Ce champ devrait être de type <code>long</code> si son but est de préciser l'identifiant de version utilisé pour la sérialisation.</p>",
	"SE_BAD_FIELD":                                             "Champ d'instance non transient et non sérialisable dans une classe sérialisable\n\n<p>Cette classe <code>Serializable</code> définit un champ d'instance non primitif qui n'est ni <code>transient</code>, ni <code>Serializable</code> ou <code>java.lang.Object</code>, et qui ne semble pas implémenter l'interface <code>Externalizable</code> ou les méthodes <code>readObject()</code> et <code>writeObject()</code>. Les objets de cette classe ne seront pas désérialisés correctement si un objet non <code>Serializable</code> est stocké dans ce champ.</p>",
	"SE_BAD_FIELD_STORE":                                       "Valeur non sérialisable stockée dans un champ d'instance de classe sérialisable\n\n<p>Une valeur non sérialisable est stockée dans un champ non <code>transient</code> d'une classe sérialisable.</p>",
	"SC_START_IN_CTOR":                                         "Un constructeur invoque Thread.start()\n\n<p>Le constructeur lance un thread. Il y a de fortes chances que ce soit une erreur si cette classe est un jour dérivée ou étendue puisque que le thread sera alors lancé avant que le constructeur de la classe dérivée ne soit appelé.</p>",
	"SS_SHOULD_BE_STATIC":                                      "Champ non lu : devrait-il être statique ?\n\n<p>Cette classe contient un champ d'instance <code>final</code> qui est initialisé par une valeur statique déterminée à la compilation. Envisagez de rendre ce champ <code>static</code>.</p>",
	"UUF_UNUSED_FIELD":                                         "Champ inutilisé\n\n<p>Ce champ n'est jamais utilisé. Envisagez de le supprimer de la classe.</p>",
	"URF_UNREAD_FIELD":                                         "Champ inutilisé\n\n<p>Ce champ n'est jamais lu. Envisagez de le supprimer de la classe.</p>",
	"QF_QUESTIONABLE_FOR_LOOP":                                 "Incrémentation compliquée, subtile au incorrecte dans une boucle for\n\n<p>Etes vous certain que cette boucle incrémente la variable voulue ? Il sembleraît qu'une autre variable est initialisée et vérifiée par la boucle.</p>",
	"UWF_NULL_FIELD":                                           "Champ uniquement mis à null\n\n<p>Ce champ est uniquement alimenté par la constante <code>null</code> et donc toutes les lectures de ce champ renverront <code>null</code>. Vérifiez si c'est une erreur ou alors supprimez ce champ qui est inutile.</p>",
	"UWF_UNWRITTEN_FIELD":                                      "Champ jamais écrit\n\n<p>Ce champ n'est jamais alimenté. Toutes les lectures vont renvoyer sa valeur par défaut. Recherchez les erreurs (devrait-il avoir été initialisé ?) ou supprimez le s'il est inutile.</p>",
	"ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD":                  "Ecriture d'un champ statique depuis la méthode d'une instance\n\n<p>La méthode de l'instance écrit la valeur d'un champ statique. Cela peut être difficile à gérer si plusieurs instances ont la possibilité d'écrire cette valeur et cela ressemble surtout à une mauvaise pratique.</p>",
	"NP_LOAD_OF_KNOWN_NULL_VALUE":                              "Chargement d'une valeur connue pour être à null\n\n<p>La variable référencée est connue pour être à <code>null</code> suite à une vérification précédente. Bien que cela soit valide, ce peut être une erreur (peut-être vouliez-vous référencer une autre valeur ou le test précédent aurait-il due vérifier non-null plutôt que null).</p>",
	"NP_IMMEDIATE_DEREFERENCE_OF_READLINE":                     "Déréférencement immédiat du résultat d'un readLine()\n\n<p>Le résultat d'un appel à <code>readLine()</code> est immédiatement déréférencé. S'il n'y a plus d'autre lignes de texte à lire, <code>readLine()</code> retournera <code>null</code> ce qui provoquera une <code>NullPointerException</code> lors du déréférencement.</p>",
	"NP_UNWRITTEN_FIELD":                                       "Lecture d'un champ jamais écrit\n\n<p>Le programme déréférence un champ qui ne semble jamais alimenté par une valeur non nulle. Déréférencer cette valeur provoquera une <code>NullPointerException</code>.</p>",
	"SIC_INNER_SHOULD_BE_STATIC":                               "Devrait être une classe interne statique\n\n<p>Cette classe est une classe interne, mais n'utilise pas sa référence vers l'objet qui l'a créée. Cette référence rend les instances de cette classe plus grosses et peut garder active la référence à l'objet créateur plus longtemps que nécessaire. Si possible, la classe devrait être transformée en classe interne <code>static</code>.</p>",
	"NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR":                  "Lecture d'un champ non initalisé dans le constructeur\n\n<p>Lecture d'un champ qui n'est jamais initialisé dans aucun constructeur, et qui sera <code>null</code> une fois l'initialisation de l'objet terminée. Ce peut être un erreur de code, ou bien la classe contenant le champ est construite de telle manière que le champ est écrit en fonction de l'appel de méthodes dans un certain ordre (un peu délicat mais pas nécessairement mauvais).</p>",
	"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR":                 "Champ non initialisé dans le constructeur\n\n<p>Ce champ n'est jamais initialisé dans aucun constructeur, et est de ce fait <code>null</code> une fois l'objet initialisé. Soit il s'agit d'une erreur, soit il s'agit d'un design douteux puisque ce champ génèra une exception s'il est déréférencé avant toute initialisation.</p>",
	"SIC_INNER_SHOULD_BE_STATIC_ANON":                          "Peut-être transformée en classe interne statique nommée\n\n<p>Cette classe est une classe interne qui n'utilise pas sa référence vers l'objet qui l'a créée. Cette référence rend l'objet plus gros et peut garder active la référence de l'objet créateur plus longtemps que nécessaire. Si possible, la classe devrait être transformée en classe interne <code>static</code>. Puisque les classes anonymes ne peuvent pas être marquées comme <code>static</code>, il faudrait également nommer cette classe.</p>",
	"SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS":                    "Pourrait-être transformée en classe interne statique\n\n<p>Cette classe est une classe interne mais elle n'utilise pas sa référence vers l'objet qui l'a créée, à part durant la création de l'objet interne. Cette référence rend les instances de cette classe plus grosses et peut forcer à garder active la référence de l'objet créateur plus longtemps que nécessaire. Si possible, la classe devrait-être transformée en classe interne <code>static</code>. Puisque la référence à l'objet créateur est requise durant la construction de la classe interne, le constructeur de celle-ci devrait-être modifié afin d'accepter en argument cette référence.</p>",
	"WA_NOT_IN_LOOP":                                           "Méthode contenant un wait() en dehors d'une boucle\n\n<p>Cette méthode contient un appel à <code>java.lang.Object.wait()</code> qui n'est pas dans une boucle. Si le moniteur est utilisé pour des conditions multiples, la condition que l'appelant attend peut ne pas être celle qui s'est réellement déclenchée.</p>",
	"WA_AWAIT_NOT_IN_LOOP":                                     "Condition.await() en dehors d'une boucle\n\n<p>Cette méthode contient un appel à <code>java.util.concurrent.await()</code> (ou une variante) qui n'est pas dans une boucle. Si cet objet est utilisé pour de multiples conditions, la condition que l'appelant espère réveiller pourra être ou ne pas être celle qui le sera effectivement.</p>",
	"NO_NOTIFY_NOT_NOTIFYALL":                                  "Utilisation de notify() plutôt que notifyAll() dans une méthode\n\n<p>Cette méthode appelle <code>notify()</code> plutôt que <code>notifyAll()</code>. Le moniteur Java est souvent utilisé pour de multiples conditions. Appeler <code>notify()</code> ne réveille qu'un thread, ce qui signifie que le thread réveillé peut ne pas être celui qui attend la condition que l'appelant vient de remplir.</p>",
	"RV_CHECK_FOR_POSITIVE_INDEXOF":                            "Méthode vérifiant que le résultat d'un String.indexOf() est positif\n\n<p>La méthode appelle <code>String.indexOf()</code> et vérifie si le résultat est strictement positif ou pas. Il est plus habituel de vérifier si le résultat est négatif. Il n'est strictement positif que lorsque la sous-chaine recherchée apparaît ailleurs qu'au début de la chaine.</p>",
	"RV_DONT_JUST_NULL_CHECK_READLINE":                         "Méthode ignorant le résultat d'un readLine() après avoir vérifié qu'il est non nul\n\n<p>La valeur renvoyée par <code>readLine()</code> est ignorée après avoir vérifié s'il n'est pas à <code>null</code>. Dans quasiment tous les cas, si le résultat n'est pas à <code>null</code>, vous souhaiterez utiliser cette valeur. Appeler de nouveau <code>readLine()</code> vous renverra une ligne différente.</p>",
	"RV_RETURN_VALUE_IGNORED":                                  "La méthode ignore une valeur de retour\n\n<p>La valeur renvoyée par cette méthode devrait-être vérifiée. Une cause habituelle de cette alarme est d'invoquer une méthode sur un objet constant en pensant que cela modifiera l'objet. Par exemple :</p>\n<pre><code>\nString dateString = getHeaderField(name);\ndateString.trim();\n</code></pre>\n<p>Le programmeur semble croire que la méthode <code>trim()</code> mettra à jour l'objet <code>String</code> référencé par <code>dateString</code>. Mais, les objets <code>String</code> étant constants, la fonction renvoi une nouvelle valeur qui est ici ignorée. Le code devrait être corrigé en :</p>\n<pre><code>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</code></pre>",
	"NP_ALWAYS_NULL":                                           "Déréférencement d'un pointeur null dans la méthode\n\n<p>Un pointeur à <code>null</code> est déréférencé ici. Ceci va mener à une <code>NullPointerException</code> quand le code sera exécuté.</p>",
	"NP_STORE_INTO_NONNULL_FIELD":                              "Stocke une valeur null dans un champ annoté NonNull\n\n<p>Une valeur qui pourrait être à <code>null</code> est stockée dans un champ qui a été annoté comme <code>NonNull</code>.</p>",
	"NP_ALWAYS_NULL_EXCEPTION":                                 "Déréférencement d'un pointeur null dans le chemin d'exception d'une méthode\n\n<p>Un pointeur à <code>null</code> dans le chemin d'exception est déréférencé ici. Cela va mener à une <code>NullPointerException</code> quand le code sera exécuté. Notez que puisque FindBugs ne détecte pas les chemins d'exception irréalisables, il est possible que cette alarme soit injustifiée.</p>\n<p>Notez aussi que FindBugs considère le choix par défaut d'un <code>switch</code> comme étant dans le chemin d'exception, puisque ce choix est souvent irréalisable.</p>",
	"NP_NULL_ON_SOME_PATH":                                     "Possible déréférencement d'un pointeur null dans une méthode\n\n<p>Une valeur par référence déréférencée ici peut-être à <code>null</code> à l'exécution. Cela peut conduire à une <code>NullPointerException</code> quand le code est exécuté.</p>",
	"NP_NULL_ON_SOME_PATH_EXCEPTION":                           "Possible déréférencement d'un pointeur null dans le chemin d'exception d'une méthode\n\n<p>Une valeur par référence qui est à <code>null</code> dans un des chemins d'exception est déréférencée ici. Ceci peut conduire à une <code>NullPointerException</code> à l'exécution du code. Notez que comme FindBugs ne repère pas les chemins d'exception irréalisables, il est possible que cette alarme soit injustifiée.</p>\n<p>Notez également que FindBugs considère le cas par défaut d'un <code>switch</code> comme faisant partie du chemin d'exception puisque ce cas est souvent inattendu.</p>",
	"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE":                   "Pointeur à null renvoyé par une méthode qui risque d'être déréférencé\n\n<p>La valeur renvoyée par une méthode est déréférencée alors que cette méthode peut renvoyer <code>null</code>. Ceci peut conduire à une <code>NullPointerException</code> quand le code sera exécuté.</p>",
	"NP_NULL_PARAM_DEREF_NONVIRTUAL":                           "Appel à une méthode non virtuelle passant null à un paramètre déréférencé de façon inconditionnelle\n\n<p>Une valeur pouvant être à <code>null</code> est passée à une méthode qui déréférence ce paramètre de façon inconditionnelle. Cela peut se terminer en <code>NullPointerException</code>.</p>",
	"NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS":                "Appel de méthode passant null à un paramètre déréférencé inconditionnellement\n\n<p>Une valeur pouvant être à <code>null</code> est passée lors d'un appel alors que toutes les méthodes cibles possibles le déréférence inconditionnellement. Cela a de fortes chances de provoquer une <code>NullPointerException</code>.</p>",
	"NP_NULL_PARAM_DEREF":                                      "Méthode passant null à un paramètre déréférencé inconditionnellement\n\n<p>Cet appel de méthode envoie <code>null</code> à une méthode qui peut déréférencer ce paramètre de façon inconditionnelle.</p>",
	"NP_NONNULL_PARAM_VIOLATION":                               "Appel de méthode transmettant null à un paramètre déclaré @NonNull\n\n<p>Cette méthode passe une valeur à <code>null</code> en paramètre d'une méthode qui a déclaré ce paramètre comme <code>@NonNull</code>.</p>\n<p>Notez que la méthode avec l'annotation <code>@NonNull</code> peut être dans une sous-classe de l'objet appelé.</p>",
	"NP_NONNULL_RETURN_VIOLATION":                              "Méthode renvoyer null mais déclarée @NonNull\n\n<p>Cette méthode peut renvoyer une valeur à <code>null</code> alors que cette méthode (ou une méthode dérivée d'une de ses classes mère) est déclarée comme renvoyant <code>@NonNull</code>.</p>",
	"NP_GUARANTEED_DEREF":                                      "Null déréférencé\n\n<p>Cette méthode contient une valeur à <code>null</code> qui est déréférencée (sauf dans les chemins impliquant une RuntimeException).</p>",
	"SI_INSTANCE_BEFORE_FINALS_ASSIGNED":                       "Initialiseur statique de classe créant une instance avant que tous les champs static final soient alimentés\n\n<p>L'initialiseur <code>static</code> de la classe crée une instance de la classe avant que tous les champs <code>static final</code> soient alimentés.</p>",
	"OS_OPEN_STREAM":                                           "La méthode peut ne pas fermer un flux\n\n<p>La méthode crée un objet de flux d'E/S, ne l'assigne à aucun champ, ne le passe à aucune méthode, ne le renvoit pas et ne semble pas le fermer dans tous les chemins d'exécution. Ceci peut entraîner le blocage d'un descripteur de fichier. C'est généralement une bonne idée d'utiliser un bloc <code>finally</code> pour s'assurer de la fermeture des flux.</p>",
	"OS_OPEN_STREAM_EXCEPTION_PATH":                            "La méthode peut oublier de fermer un flux en cas d'exception\n\n<p>La méthode crée un flux d'E/S, ne l'affecte à aucun champ, ne le passe à aucune méthode, ne le renvoit pas, et ne semble pas le fermer dans tous les chemins d'exception possibles. Ceci peut provoquer le blocage d'un descripteur de fichier. C'est généralement une bonne idée d'utiliser un bloc <code>finally</code> pour garantir la fermeture des flux.</p>",
	"PZLA_PREFER_ZERO_LENGTH_ARRAYS":                           "Envisagez de renvoyer un tableau vide plutôt que null\n\n<p>Renvoyer un tableau vide constitue souvent une meilleure approche plutôt que de renvoyer une référence à <code>null</code> pour signaler qu'il n'y a pas de résultat (c'est-à-dire, une liste vide de résultats). De cette façon, aucune vérification explicite du <code>null</code> n'est nécessaire dans les méthodes clientes.</p>\n<p>D'un autre côté, utiliser <code>null</code> signifie \"il n'y a pas de réponse à cette question\". Cela peut donc être approprié. Par exemple, <code>File.listFiles()</code> renvoi une liste vide si un répertoire donné ne contient pas de fichiers, et renvoi <code>null</code> si le fichier n'est pas un répertoire.</p>",
	"UCF_USELESS_CONTROL_FLOW":                                 "Instruction de contrôle du flux inutile\n\n<p>Cette méthode contient une instruction de contrôle du flux inutile. Ceci est souvent provoqué par inadvertance, en utilisant un paragraphe vide comme corps d'une condition. Exemple :</p>\n<pre><code>\nif (argv.length == 1);\n    System.out.println(\"Hello, \" + argv[0]);\n</code></pre>",
	"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE":            "Test de nullité d'une valeur préalablement déréférencée\n\n<p>Une valeur est testée ici pour savoir si elle est à <code>null</code> alors que cette valeur ne peut pas être à <code>null</code> puisqu'elle a été déréférencée et qu'une <code>NullPointerException</code> se serait alors produite à ce moment. Ce code est en contradiction avec le déréférencement préalable au sujet de la capacité de cette valeur d'être à <code>null</code>. Soit le test est redondant, soit le déréférencement préalable est erroné.</p>",
	"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE":                    "Test de nullité redondant sur une valeur connue pour être à null\n\n<p>Cette méthode contient un test redondant de nullité sur une valeur ne pouvant qu'être à <code>null</code>.</p>",
	"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE":                 "Test de nullité redondant sur une valeur non nulle\n\n<p>Cette méthode contient un test redondant de nullité sur une valeur connue pour être non nulle.</p>",
	"RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES":                 "Comparaison redondante de deux valeurs nulles\n\n<p>Cette méthode contient une comparaison redondante entre deux références connues pour être obligatoirement à <code>null</code>.</p>",
	"RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE":       "Comparaison redondante d'une valeur non nulle avec null\n\n<p>Cette méthode contient une comparaison entre une référence connue pour être non nulle avec une autre référence connue pour être à <code>null</code>.</p>",
	"RCN_REDUNDANT_CHECKED_NULL_COMPARISON":                    "Comparaison redondante à null d'une valeur préalablement vérifiée\n\n<p>Cette méthode contient une comparaison redondante d'une référence à <code>null</code>. Deux types de comparaisons redondantes sont signalés :</p>\n<ul>\n<li>les deux valeurs sont définitivement à <code>null</code></li>\n<li>une valeur est définitivement à <code>null</code> et l'autre ne pourra jamais l'être</li>\n</ul>\n<p>Cette alarme signale généralement qu'une variable connue pour être différente de <code>null</code> est comparée avec <code>null</code>. Bien que le test ne soit pas nécessaire, ce peut-être un simple cas de programmation défensive.</p>",
	"UL_UNRELEASED_LOCK":                                       "La méthode ne libère pas un verrou dans tous les chemins d'exécution\n\n<p>Cette méthode acquière un verrou JSR-166 (<code>java.util.concurrent</code>), mais ne le libère pas dans tous les chemins d'exécution. En général, l'idiome correct pour utiliser un verrou JSR-166 est :</p>\n<pre><code>\nLock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n</code></pre>",
	"UL_UNRELEASED_LOCK_EXCEPTION_PATH":                        "La méthode ne libère pas un verrou dans tous les chemins d'exception\n\n<p>Cette méthode acquière un verrou JSR-166 (<code>java.util.concurrent</code>), mais ne le libère pas dans tous les chemins d'exception. En général, l'idiome correct pour utiliser un verrou JSR-166 est :</p>\n<pre><code>\nLock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n</code></pre>",
	"RC_REF_COMPARISON":                                        "Comparaison de références suspecte\n\n<p>Cette méthode compare deux références avec l'opérateur <code>==</code> ou <code>!=</code>, alors que la façon correcte de comparer les instances de ce type est généralement d'utiliser la méthode <code>equals()</code>. Des exemples de classes qui ne doivent généralement pas être comparées par référence sont <code>java.lang.Integer</code>, <code>java.lang.Float</code>, etc...</p>",
	"EC_UNRELATED_TYPES":                                       "Appel de equals() comparant des types différents\n\n<p>Cette méthode appelle <code>equals(Object)</code> pour deux références de type différents, sans sous-classe commune. Les objets comparés ne sont donc probablement pas de la même classe à l'éxécution (au moins que certaines classes de l'application n'aient pas été analysées ou qu'il y ait des chargements dynamiques). D'après le contrat de <code>equals()</code>, les objets de classes différentes devraient toujours être inégaux, c'est pourquoi la comparaison a de fortes chances de toujours renvoyer <code>false</code> à l'exécution.</p>",
	"EC_UNRELATED_INTERFACES":                                  "Appel de equals() comparant différentes interfaces\n\n<p>Cette méthode appelle <code>equals(Object)</code> pour deux références d'interfaces sans rapport, aucune n'étant un sous-type de l'autre et aucune classe non abstraite implémentant les deux interfaces. Les objets comparés ne sont donc probablement pas de la même classe à l'éxécution (au moins que certaines classes de l'application n'aient pas été analysées ou qu'il y ait des chargements dynamiques). D'après le contrat de <code>equals()</code>, les objets de classes différentes devraient toujours être inégaux.</p>",
	"EC_UNRELATED_CLASS_AND_INTERFACE":                         "Appel de equals() comparant une classe et une interface sans relation\n\n<p>Cette méthode appelle <code>equals(Object)</code> sur deux références, l'une de classe, l'autre d'interface, alors que ni la classe, ni aucune de ses sous classes abstraites n'implémente l'interface. Les objets comparés ne font donc probablement pas partie de la même hiérarchie de classe à l'exécution (à moins que certaines classes de l'application n'est pas été analysées ou soient chargées dynamiquement à l'exécution). En accord avec le contrat de <code>equals()</code>, des objets de classes différentes doivent toujours être non égaux, donc le résultat de cette comparaison par <code>java.lang.Object.equals(Object)</code> renverra systèmatiquement <code>false</code> à l'exécution.</p>",
	"EC_NULL_ARG":                                              "Appel de equals() avec un argument à null\n\n<p>Cette méthode appelle <code>equals(Object)</code>, passant une valeur à <code>null</code> comme argument. D'après le contrat de la méthode <code>equals()</code>, cet appel devrait systématiquement renvoyer <code>false</code>.</p>",
	"MWN_MISMATCHED_WAIT":                                      "wait() non appareillé\n\n<p>Cette méthode appelle <code>Object.wait()</code> sans détenir, visiblement, de verrou sur l'objet. Appeler <code>wait()</code> sans détenir de verrou entraîne le déclenchement d'une <code>IllegalMonitorStateException</code>.</p>",
	"MWN_MISMATCHED_NOTIFY":                                    "notify() non appareillé\n\n<p>Cette méthode appelle <code>Object.notify()</code> ou <code>Object.notifyAll()</code> sans détenir, visiblement, de verrou sur l'objet. Appeler <code>notify()</code> ou <code>notifyAll()</code> sans détenir de verrou entraîne le déclenchement d'une <code>IllegalMonitorStateException</code>.</p>",
	"SA_LOCAL_SELF_ASSIGNMENT":                                 "Auto-alimentation d'une variable locale\n\n<p>Cette méthode contient une auto-alimentation d'une variable locale, par exemple :</p>\n<pre><code>\npublic vida foo() {\n  int x = 3;\n  x = x;\n}\n</code></pre>\n<p>De telles affectations sont inutiles et peuvent indiquer une faute de frappe ou une erreur de logique.</p>",
	"SA_FIELD_SELF_ASSIGNMENT":                                 "Auto-alimentation d'un champs\n\n<p>Cette méthode contient un champ s'auto-alimentant; par exemple :</p>\n<pre><code>\nint x;\npublic void foo() {\n  x = x;\n}\n</code></pre>\n<p>De telles affectations sont inutiles et peuvent indiquer une faute de frappe ou une erreur logique.</p>",
	"RV_REM_OF_RANDOM_INT":                                     "Reste d'un entier signé 32 bits aléeatoire\n\n<p>Ce code génère un entier signé aléatoire puis calcule le reste de cette valeur modulo une autre valeur. Puisque ce nombre aléatoire peut être négatif, le reste de l'opération peut également l'être. Soyez sûr que c'est voulu, et envisagez d'utiliser à la place la méthode <code>Random.nextInt(int)</code>.</p>",
	"RV_REM_OF_HASHCODE":                                       "Reste d'un hashCode pouvant être négatif\n\n<p>Ce code calcule le code de hachage, puis son reste modulo une certaine valeur. Puisque le code de hachage peut être négatif, le reste peut également l'être.</p>\n<p>En supposant que vous vouliez garantir que le résultat de votre opération ne soit pas négatif, vous devriez modifier votre code. Si le diviseur est une puissance de 2, vous pourriez utiliser un décalage binaire à la place (c'est-à-dire <code>x.hashCode()&amp;(n-1)</code> au lieu de <code>x.hashCode()%n</code>). Cela est probablement plus rapide que de calculer le reste. Si le diviseur n'est pas une puissance de 2, vous devriez prendre la valeur absolue du reste (<code>Math.abs(x.hashCode()%n)</code>).</p>",
	"INT_VACUOUS_COMPARISON":                                   "Comparaison inutile de valeurs entières\n\n<p>Il y a une comparaison entière qui renvoie toujours la même valeur (Ex. : <code>x <= Integer.MAX_VALUE</code>).</p>",
	"INT_BAD_REM_BY_1":                                         "Reste entier modulo 1\n\n<p>Cette expression (Ex. : <code>exp % 1</code>) est assurée de toujours renvoyer 0. Vouliez-vous plutot dire <code>(exp & 1)</code> ou <code>(exp % 2)</code> ?</p>",
	"BIT_IOR_OF_SIGNED_BYTE":                                   "Ou binaire d'un octet signé\n\n<p>Charge une valeur à partir d'un tableau d'octets et effectue un ou binaire sur cette valeur. Les valeurs venant d'un tableau d'octet sont signées et risquent donc de ne pas se comporter comme prévue.</p>",
	"BIT_AND":                                                  "Masques binaires incompatibles\n\n<p>Cette méthode compare une expression de la forme (a <code>&amp;</code> C) avec D, qui est toujours inégale en raison des valeurs spécifiques des constantes C et D. Cela peut indiquer une faute de frappe ou une erreur logique.</p>",
	"BIT_AND_ZZ":                                               "Masques binaires incompatibles\n\n<p>Cette méthode compare une expression de la forme (a <code>&amp;</code> 0) avec 0, qui est toujours égale. Ceci peut indiquer une faute de frappe ou une erreur logique.</p>",
	"BIT_IOR":                                                  "Masques binaires incompatibles\n\n<p>Cette méthode compare une expression de la forme (a <code>|</code> C) avec D, qui est toujours inégale en raison des valeurs spécifiques des constantes C et D. Ceci peut indiquer une erreur logique ou une faute de frappe.</p>\n<p>Typiquement, ce bogue arrive quand du code essaye d'effectuer un test d'apparition d'un bit mais utilise l'opérateur OU (\"<code>|</code>\") au lieu de l'opérateur ET (\"<code>&amp;</code>\").</p>",
	"LI_LAZY_INIT_INSTANCE":                                    "Initialisation paresseuse incorrecte d'un champ d'instance\n\n<p>Cette méthode contient une initialisation paresseuse non synchronisée d'un champ non <code>volatile</code>. Comme le compilateur ou le processeur peuvent réordonner les instructions, les threads ne sont pas certains de voir un objet complètement initialisé, <em>si la méthode peut-être appelée par de multiples threads</em>. Vous pouvez rendre le champs <code>volatile</code> pour corriger le problème. Pour plus d'informations, cf. <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">site Web sur le modèle mémoire de Java</a>.</p>",
	"LI_LAZY_INIT_STATIC":                                      "Initialisation paresseuse incorrecte d'un champ statique\n\n<p>Cette méthode contient une initialisation paresseuse non synchronisée d'un champ statique non <code>volatile</code>. Comme le compilateur ou le processeur peuvent réordonner les instructions, les threads ne sont pas certains de voir un objet complètement initialisé, <em>si la méthode peut-être appelée par de multiples threads</em>. Vous pouvez rendre le champs <code>volatile</code> pour corriger le problème. Pour plus d'informations, cf. <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">site Web sur le modèle mémoire de Java</a>.</p>",
	"JLM_JSR166_LOCK_MONITORENTER":                             "Synchronisation effectuée sur un Lock java.util.concurrent\n\n<p>Cette méthode se synchronise au moyen d'une implémentation de <code>java.util.concurrent.locks.Lock</code>. Vous devriez plutôt utiliser les méthodes <code>lock()</code> et <code>unlock()</code>.</p>",
	"UPM_UNCALLED_PRIVATE_METHOD":                              "Méthode privée jamais appelée\n\n<p>Cette méthode privée n'est jamais appelée. Bien qu'il soit possible que cette méthode soit appelée par réflexion, il y a plus de chances qu'elle ne soit jamais utilisée et qu'elle puisse être supprimée.</p>",
	"UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS":                "Méthode non appelable définie dans une classe anonyme\n\n<p>Cette classe anonyme définie une méthode qui n'est pas directement appelée et qui ne surcharge pas une méthode de la classe mère. Puisque les méthodes des autres classes ne peuvent pas directement invoquer les méthodes des classes anonymes, il apparaît que cette méthode est inaccessible. Cette méthode est probablement du code mort, mais il est aussi possible qu'elle essaye de surcharger une méthode déclarée dans la classe mère et échoue à le faire en raison d'une erreur de type ou autre.</p>",
	"ODR_OPEN_DATABASE_RESOURCE":                               "La méthode peut ne pas fermer une ressource base de données\n\n<p>Cette méthode crée une ressource base de données (telle qu'une connexion ou un <code>RowSet</code>), ne l'affecte à aucun champ, ne la passe à aucune autre méthode, ne la renvoie pas, et ne semble pas la fermer dans tous les chemins d'exécution. Ne pas fermer une ressource base de données dans tous les chemins d'exécution peut entraîner de faibles performances et poser des problèmes de communication entre la base de données et l'application.</p>",
	"ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH":                "La méthode peut ne pas fermer une ressource base de données sur une exception\n\n<p>Cette méthode crée une ressource base de données (telle qu'une connexion ou un <code>RowSet</code>), ne l'affecte à aucun champ, ne la passe à aucune autre méthode, ne la renvoie pas, et ne semble pas la fermer dans tous les chemins d'exception. Ne pas fermer une ressource base de données peut entraîner de faibles performances et poser des problèmes de communication entre la base de données et l'application.</p>",
	"SBSC_USE_STRINGBUFFER_CONCATENATION":                      "La méthode concatène des chaînes au moyen de + en boucle\n\n<p>Cette méthode semble construire une <ocde>String</code> en utilisant une concaténation en boucle. A chaque itération, l'objet <code>String</code> est converti en <code>StringBuffer</code>/<code>StringBuilder</code>, complété, puis de nouveau converti en <code>String</code>. Ceci a un coût exponentiel en fonction du nombre d'itérations, puisque la chaîne est recopiée à chaque itération.</p>\n<p>De meilleurs performances peuvent être obtenues en utilisant explicitement <code>StringBuffer</code> (ou <code>StringBuilder</code> en Java 5).</p>\n<p>Par exemple :</p>\n<pre><code>\n// C'est mal !\nString s = \"\";\nfor (int i = 0; i &lt; field.length; ++i) {\n  s = s + field[i];\n}\n\n// C'est mieux...\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i &lt; field.length; ++i) {\n  buf.append(field[i]);\n}\nString s = buf.toString();\n</code></pre>",
	"ITA_INEFFICIENT_TO_ARRAY":                                 "La méthode utilise toArray() avec un tableau vide en paramètre\n\n<p>Cette méthode utilise la méthode <code>toArray()</code> d'une classe dérivant de <code>Collection</code>, en lui passant en paramètre un tableau vide. Il est plus efficace d'utiliser <code>myCollection.toArray(new Foo[myCollection.size()])</code>. Si le tableau transmis est assez grand pour stocker tous les éléments de la collection, alors il est alimenté et renvoyé directement. Ceci évite la nécessité de créer un nouveau tableau (par réflexion) pour renvoyer le résultat.</p>",
	"IJU_SETUP_NO_SUPER":                                       "Une classe dérivant de TestCase implémente setUp() sans appeler super.setUp()\n\n<p>La classe dérive de la classe <code>TestCase</code> de JUnit est implémente la méthode <code>setUp()</code>. La méthode <code>setUp()</code> devrait appeler <code>super.setUp()</code>, mais ne le fait pas.</p>",
	"IJU_TEARDOWN_NO_SUPER":                                    "Une classe dérivant de TestCase implémente tearDown() sans appeler super.tearDown()\n\n<p>La classe dérive de la classe <code>TestCase</code> de JUnit et implémente la méthode <code>tearDown()</code>. La méthode <code>tearDown()</code> devrait appeler <code>super.tearDown()</code>, mais ne le fait pas.</p>",
	"IJU_SUITE_NOT_STATIC":                                     "Une classe dérivant de TestCase implémente une méthode suite() non statique\n\n<p>La classe dérive de <code>TestCase</code> de JUnit et implémente une méthode <code>suite()</code>. La méthode <code>suite()</code> devrait-être déclarée comme étant <code>static</code>, ce qui n'est pas fait.</p>",
	"IJU_NO_TESTS":                                             "TestCase sans tests\n\n<p>La classe JUnit <code>TestCase</code> n'implémente aucune méthode de test.</p>",
	"BOA_BADLY_OVERRIDDEN_ADAPTER":                             "La classe surcharge mal une méthode implémentée dans une superclasse Adapter\n\n<p>Cette méthode surcharge une méthode provenant d'une classe mère qui est un <code>Adapter</code> qui implémente un <code>Listener</code> défini dans le paquetage <code>java.awt.event</code> ou <code>javax.swing.event</code>. En conséquence, cette méthode ne sera pas appelée quand l'évènement se produira.</p>",
	"BRSA_BAD_RESULTSET_ACCESS":                                "La méthode essaye d'accéder à un champ de ResultSet avec l'index 0\n\n<p>Un appel à la méthode <code>getXXX()</code> ou <code>updateXXX()</code> d'un <code>ResultSet</code> est effectué avec l'index de champ 0. Comme l'index des champs de <code>ResultSet</code> commence à 1 c'est toujours une erreur.</p>",
	"SQL_BAD_RESULTSET_ACCESS":                                 "Méthode essayant d'accèder à un champ de ResultSet d'indice 0\n\n<p>Un appel à une méthode <code>getXXX</code> ou <code>updateXXX</code> d'un <code>ResultSet</code> est réalisé pour l'indice 0. Puisque les indices de <code>ResultSet</code> commencent à 1, c'est toujours une erreur.</p>",
	"SQL_BAD_PREPARED_STATEMENT_ACCESS":                        "Méthode essayant au paramêtre d'indice 0 d'un PreparedStatement\n\n<p>Un appel  à une méthode <code>setXXX</code> d'un <code>PreparedStatement</code> est réalisé sur l'indice 0. Puisque les indices des paramêtres d'un <code>PreparedStatement</code> commencent à 1, c'est toujours une erreur.</p>",
	"SIO_SUPERFLUOUS_INSTANCEOF":                               "Vérification de type inutile avec l'opérateur instanceof\n\n<p>Vérification de type effectuée avec l'opérateur <code>instanceof</code> alors que cela pourrait-être déterminé statiquement.</p>",
	"BAC_BAD_APPLET_CONSTRUCTOR":                               "Constructeur d'Applet erroné reposant sur un AppletStub non initialisé\n\n<p>Ce constructeur appelle des méthodes de l'applet mère qui repose sur l'AppletStub. Comme l'AppletStub n'est pas initialisé jusqu'à ce que la méthode <code>init()</code> de cette applet soit appelée, ces méthodes ne se comporteront pas correctement.</p>",
	"EC_ARRAY_AND_NONARRAY":                                    "Utilisation de equals() pour comparer un tableau et un objet\n\n<p>Cette méthode appelle <code>equals(Object o)</code> pour comparer un tableau et une référence qui ne semble pas être un tableau. Si les choses comparées sont de type différents, il est garanti qu'elles seront non égales et la comparaison est probablement une erreur. Même si les deux sont des tableaux, la méthode <code>equals()</code> détermine seulement si les deux tableaux sont le même objet. Pour comparer le contenu de deux tableaux, utilisez <code>java.util.Arrays.equals(Object[], Object[])</code>.</p>",
	"EC_BAD_ARRAY_COMPARE":                                     "Appel à equals() sur un tableau équivalent à ==\n\n<p>Cette méthode invoque la méthode <code>equals(Object o)</code> d'un tableau. Comme les tableaux ne surchargent pas la méthode <code>equals()</code> de <code>Object</code>, cet appel revient à comparer les adresses. Pour comparer les contenus de tableaux, utilisez <code>java.util.Arrays.equals(Object[], Object[])</code>.</p>",
	"STI_INTERRUPTED_ON_CURRENTTHREAD":                         "Utilisation superflue d'un appel à currentThread() pour appeler interrupted()\n\n<p>Cette méthode invoque <code>Thread.currentThread()</code> juste pour appeler la méthode <code>interrupted()</code>. Comme <code>interrupted()</code> est une méthode statique, il est plus simple et facile d'utiliser <code>Thread.interrupted()</code>.</p>",
	"STI_INTERRUPTED_ON_UNKNOWNTHREAD":                         "Thread.interrupted() appelée par erreur sur un objet Thread arbitraire\n\n<p>Cette méthode invoque <code>Thread.interrupted()</code> sur un objet <code>Thread</code> qui n'est pas le thread actif. Pusique la méthode <code>interrupted()</code> est statique, la méthode <code>interrupted()</code> sera appelée sur un objet différent de celui auquel l'auteur du code pensait.</p>",
	"IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN":                     "Un paramètre est ré-écrit avant d'être utilisé\n\n<p>La valeur initiale de ce paramètre est ignorée, et le paramètre est écrasé. Ceci indique généralement une erreur provenant de la croyance infondée qu'une écriture sur ce paramètre sera transmise à l'appelant.</p>",
	"DLS_DEAD_LOCAL_STORE":                                     "Alimentation à perte d'une variable locale\n\n<p>Cette instruction assigne une valeur à une variable locale mais cette variable n'est pas lue par la suite. Ceci indique souvent une erreur puisque la valeur calculée n'est jamais utilisée.</p>\n<p>Notez que le compilateur javac de Sun génère fréquemment ce genre d'affectations à perte. FindBugs analysant le byte-code généré, il n'y a pas de façon simple d'éliminer ces fausses alarmes.</p>",
	"DLS_DEAD_LOCAL_STORE_OF_NULL":                             "Alimentation à null d'une variable\n\n<p>Le code alimente une variable locale avec null, la valeur n'étant jamais lue par la suite. Cette alimentation a pu être introduite pour faciliter le travail du ramasse-miettes, mais cela n'a plus aucun intérêt avec Java SE 6.</p>",
	"MF_METHOD_MASKS_FIELD":                                    "La méthode définit une variable qui masque un champ\n\n<p>Cette méthode définit une variable locale ayant le même nom qu'un champ de la classe ou d'une classe mère. Ceci peut pousser la méthode à lire une valeur non initialisée dans le champs, à le laisser non initialisé ou les deux.</p>",
	"MF_CLASS_MASKS_FIELD":                                     "La classe définit un champ qui masque un champ d'une classe mère\n\n<p>Cette classe définit un champ avec le même nom qu'un champ visible d'instance d'une classe mère. C'est ambigu et peut entraîner une erreur si des méthodes mettent à jour ou accèdent à un des champs alors qu'elles souhaitaient utiliser l'autre.</p>",
	"WMI_WRONG_MAP_ITERATOR":                                   "Utilisation inefficace d'un itérateur sur keySet au lieu de entrySet\n\n<p>Cette méthode accède à la valeur d'une entrée de <code>Map</code> au moyen d'une clé provenant d'un itérateur sur <code>keySet</code>. Il est plus efficace d'utiliser un itérateur sur l'<code>entrySet</code> de la <code>Map</code>, pour éviter la recherche par <code>Map.get(clé)</code>.</p>",
	"ISC_INSTANTIATE_STATIC_CLASS":                             "Instantiation inutile d'une classe qui n'a que des méthodes statiques\n\n<p>Cette classe alloue un objet basé sur une classe qui n'a que des méthodes statiques. Cet objet n'a pas besoin d'être créé, accédez directement aux méthodes en utilisant le nom de la classe.</p>",
	"REC_CATCH_EXCEPTION":                                      "java.lang.Exception est intercepté alors qu'Exception n'est jamais lancé\n\n<p>Cette méthode utilise un block <code>try-catch</code> qui intercepte les objets <code>Exception</code>, mais <code>Exception</code> n'est jamais déclenché dans ce bloc, et <code>RuntimeException</code> n'est pas explicitement intercepté.  C'est une erreur commune de dire que <code>try / catch (Exception e)</code> est identique à plusieurs <code>try / catch</code>, mais cette tournure intercepte également les <code>RuntimeException</code>, masquant des bugs potentiels.</p>",
	"FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER":                         "Test d'égalité avec NaN erroné\n\n<p>Ce code vérifie si une valeur flottante est égale à la valeur spéciale \"Not A Number\" (Ex. : <code>if (x == Double.NaN)</code>). La sémantique de <code>NaN</code> fait que, par définition, aucune valeur n'est égale à <code>Nan</code>, y compris <code>NaN</code>. Donc <code>x == Double.NaN</code> renvoi systématiquement <code>false</code>.</p>\n<p>Pour savoir si la valeur contenu dans <code>x</code> est la valeur particulière \"Not A Number\", utilisez <code>Double.isNaN(x)</code> (ou <code>Float.isNaN(x)</code> si <code>x</code> est en simple précision).</p>",
	"FE_FLOATING_POINT_EQUALITY":                               "Test d'égalité en virgule flottante.\n\n<p>Cette opération teste l'égalité de deux valeurs en virgule flottante. Les calculs en virgule flottante pouvant introduire des arrondis, les valeurs flottantes ou doubles peuvent être imprécises. Pour les valeurs qui doivent être précises, telles que les valeurs monétaires, pensez à utiliser un type à précision fixe tel qu'un <code>BigDecimal</code>. Pour les valeurs qui n'ont pas besoin d'être précises, pensez à tester l'égalité sur une portée quelconque, par exemple : <code>if ( Math.abs(x - y) &lt; .0000001 )</code>. Cf section 4.2.4 des spécifications du langage Java.</p>",
	"UM_UNNECESSARY_MATH":                                      "Appel d'une méthode statique de la classe Math sur une valeur constante\n\n<p>Cette méthode utilise une méthode statique de <code>java.lang.Math</code> sur une valeur constante. Dans ce cas, le résultat de cet appel peut être déterminé statiquement, ce qui est plus rapide et souvent plus précis. Les méthodes détectées sont :</p>\n<table>\n<tr><th>Méthode</th><th>Paramètre</th></tr>\n<tr><td>abs</td><td>-tous-</td></tr>\n<tr><td>acos</td><td>0.0 ou 1.0</td></tr>\n<tr><td>asin</td><td>0.0 ou 1.0</td></tr>\n<tr><td>atan</td><td>0.0 ou 1.0</td></tr>\n<tr><td>atan2</td><td>0.0</td></tr>\n<tr><td>cbrt</td><td>0.0 ou 1.0</td></tr>\n<tr><td>ceil</td><td>-tous-</td></tr>\n<tr><td>cos</td><td>0.0</td></tr>\n<tr><td>cosh</td><td>0.0</td></tr>\n<tr><td>exp</td><td>0.0 ou 1.0</td></tr>\n<tr><td>expm1</td><td>0.0</td></tr>\n<tr><td>floor</td><td>-tous-</td></tr>\n<tr><td>log</td><td>0.0 ou 1.0</td></tr>\n<tr><td>log10</td><td>0.0 ou 1.0</td></tr>\n<tr><td>rint</td><td>-tous-</td></tr>\n<tr><td>round</td><td>-tous-</td></tr>\n<tr><td>sin</td><td>0.0</td></tr>\n<tr><td>sinh</td><td>0.0</td></tr>\n<tr><td>sqrt</td><td>0.0 ou 1.0</td></tr>\n<tr><td>tan</td><td>0.0</td></tr>\n<tr><td>tanh</td><td>0.0</td></tr>\n<tr><td>toDegrees</td><td>0.0 ou 1.0</td></tr>\n<tr><td>toRadians</td><td>0.0</td></tr>\n</table>",
	"CD_CIRCULAR_DEPENDENCY":                                   "Dépendance circulaire entre des classes\n\n<p>Cette classe a une dépendance circulaire avec d'autres classes. Ceci rend la compilation de ces classes difficile puisque chaque classe est dépendante de l'autre pour être correctement construite. Pensez à utiliser des interfaces pour briser la dépendance circulaire forte.</p>",
	"RI_REDUNDANT_INTERFACES":                                  "Classe implémentant la même interface que sa super-classe\n\n<p>Cette classe déclare implémenter une interface qui est aussi implémentée par une de ses classes mères. Ceci est redondant : dès qu'une super-classe implémente une interface, toutes les sous-classes le font aussi par défaut. Cela peut indiquer que la hiérarchie d'héritage a changé depuis la création de cette classe et la cible de l'implémentation de l'interface doit peut-être être reprise en considération.</p>",
	"MTIA_SUSPECT_STRUTS_INSTANCE_FIELD":                       "La classe hérite d'une classe action Struts et utilise les variables de l'instance.\n\n<p>Cette classe hérite d'une classe <code>Action</code> Struts, et utilise une variable de cette instance. Puisqu'une seule instance de la classe <code>Action</code> Struts est créée par le cadre de travail Struts, et est utilisée dans un environnement multitâche, ce paradigme est très fortement découragé et très certainement problématique. Considérer l'emploi seul de variables propres à la méthode.</p>",
	"MTIA_SUSPECT_SERVLET_INSTANCE_FIELD":                      "La classe hérite de Servlet et utilise les variables de l'instance.\n\n<p>Cette classe hérite de la classe <code>Servlet</code>, et utilise une variable de l'instance. Puisqu'une seule instance d'une classe <code>Servlet</code> est créée par le cadre de travail J2EE, et est utilisée dans un environnement multitâche, ce paradigme est très fortement découragé et très certainement problématique. Considérer l'emploi seul de variables propres à la méthode.</p>",
	"PS_PUBLIC_SEMAPHORES":                                     "La classe expose sa synchronisation et ses sémaphores dans son interface publique.\n\n<p>Cette classe utilise la synchronisation avec with <code>wait()</code>, <code>notify()</code> or <code>notifyAll()</code> sur elle-même (la référence <code>this</code>). Les classes qui utilise cette classes peuvent de plus utiliser une instance de cette classe comme un objet de synchronisation. Du fait que deux classes peuvent utiliser le même objet pour la synchronisation, la cohérence en environnement multitâche devient suspecte. Vous ne devriez synchroniser ni appeler de méthodes de sémaphores sur une référence publique. Considérer l'utilisation d'une varible interne privée pour contrôler la synchronisation.</p>",
	"ICAST_INTEGER_MULTIPLY_CAST_TO_LONG":                      "Résultat d'une multiplication entière transtypée en long\n\n<p>Ce code effectue des multiplications entières et transtype le résultat en <code>long</code>, comme dans :\n<code>long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }</code>. Si la multiplication était réalisée en utilisant l'arithmétique <code>long</code>, vous pourriez éviter le risque de débordement de capacité du calcul. Vous pouvez par exemple corriger le code précédent par : <code>long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }</code> ou</p>\n<pre><code>\nstatic final long MILLISECONDS_PER_DAY = 24L*3600*1000;\nlong convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; } \n</code></pre>",
	"ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND":                  "Valeur entière transtypée en flottant puis transmise à Math.round\n\n<p>Ce code converti une valeur entière en flottant simple précision puis la passe à la méthode <code>Math.round()</code> qui renvoi l'<code>int</code> ou le <code>long</code> le plus proche de son paramètre. Cette opération doit toujours revenir à ne rien faire, puisque le transtypage d'un entier en un flottant devrait systématiquement donner un flottant sans partie décimale. Il est probable que l'opération gérant la valeur passée à <code>Math.round()</code> devrait être effectuée en arithmétique flottante.</p>",
	"ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL":                  "Valeur entière transtypée en nombre flottant passée à Math.ceil\n\n<p>Ce code convertit une valeur entière en nombre flottant à double précision et passe le résultat à la méthode <code>Math.ceil()</code>, qui arrondit un nombre flottant à sa valeur entière immédiatement supérieure. Cette opération n'a pas de raison d'être, puisque le transtypage d'un entier en double donne un nombre sans valeur après la virgule. Il est vraissemblable que l'opération qui a créé la valeur pour la passer à <code>Math.ceil</code> visait l'utilisation de l'arithmétique sur un nombre flottant en double précision.</p>",
	"ICAST_IDIV_CAST_TO_DOUBLE":                                "Résultat d'une division entière transtypé en nombre flottant\n\n<p>Ce code transtype le résultat d'une division entière en un nombre flottant à double précision. Effectuer une division sur des nombres entiers n'est pas précis. Le fait que le résultat soit transtypé en <code>double</code> suggère que cette précision était voulue dès le départ. Peut être l'un ou l'autre des opérandes, ou les deux opérandes, auraient du être transtypé avant d'effectuer la division. Voici un exemple :</p>\n<pre><code>\nint x = 2;\nint y = 5;\n// Faux: renvoi 0.0\ndouble value1 =  x / y;\n\n// Juste: renvoi 0.4\ndouble value2 =  x / (double) y;\n</code></pre>",
	"J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION":       "Stockage d'un objet non serialisable dans une session Http\n\n<p>Ce code semble stocker un objet non sérialisable dans un <code>HttpSession</code>. Une erreur se produira si cette session est rendue passive ou migrée.</p>",
	"DMI_NONSERIALIZABLE_OBJECT_WRITTEN":                       "Objet non sérialisable écrit dans un ObjectOutput\n\n<p>Ce code semble transmettre un objet non sérialisable à la méthode <code>ObjectOutput.writeObject</code>. Une erreur se produira si cet objet est effectivement non sérialisable.</p>",
	"VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG":               "Tableau de primitives passé à une fonction attendant un nombre variable d'objets en argument\n\n<p>Ce code envoie un tableau de primitives à une fonction qui attend un nombre variable d'objets en arguments. Ceci créé un tableau de longueur 1 pour contenir le tableau de primitives puis le passe à la fonction.</p>",
	"BC_BAD_CAST_TO_ABSTRACT_COLLECTION":                       "Transtypage douteux d'un type Collection vers une classe abstraite\n\n<p>Ce code transtype un object de type <code>Collection</code> vers un type de collection abstrait (tel que <code>Collection</code>). Assurez vous que l'objet est bien du type précisé. Si vous désirez par exemple faire une itération sur une collection, le transtypage vers <code>Set</code> ou <code>List</code> est inutile.</p>",
	"BC_IMPOSSIBLE_CAST":                                       "Transtypage impossible\n\n<p>Ce trantypage lancera toujours une exception <code>ClassCastException</code>.</p>",
	"BC_NULL_INSTANCEOF":                                       "Une valeur connue pour être à null est vérifiée pour savoir si elle est une instance d'un type\n\n<p>Ce test <code>instanceof</code> renverra systématiquement <code>false</code>, puisqu'il est garanti que la valeur testée sera à <code>null</code>. Bien que ce test soit sûr, il est probable qu'il indique une incompréhension ou une erreur de logique.</p>",
	"BC_IMPOSSIBLE_INSTANCEOF":                                 "instanceof renverra toujours faux\n\n<p>Ce test <code>instanceof</code> renverra toujours faux. Même s'il est sûr, assurez-vous qu'il ne s'agisse pas d'une erreur logique ou d'une mauvaise compréhension.</p>",
	"BC_VACUOUS_INSTANCEOF":                                    "instanceof renverra toujours vrai\n\n<p>Ce test <code>instanceof</code> renverra toujours vrai. Même s'il est sûr, assurez-vous qu'il ne s'agit pas d'une erreur logique ou d'une mauvaise compréhension.</p>",
	"BC_UNCONFIRMED_CAST":                                      "Transtypage non vérifié/non confirmé\n\n<p>La faisablité du transtypage n'est pas vérifiée, et tous les objets candidats au transtypage ne sont pas légitimes. Assurez vous que la logique du programme est correcte et que le transtypage n'échouera pas.</p>",
	"BC_BAD_CAST_TO_CONCRETE_COLLECTION":                       "Transtypage douteux vers une collection concrète\n\n<p>Ce code transtype une collection abstraite (telles que <code>Collection</code>, <code>List</code>, ou <code>Set</code>) vers une implémentation concrète spécifique (telles que <code>ArrayList</code> ou <code>HashSet</code>). Ceci n'est pas forcément correct, et peut rendre votre code plus fragile, puisqu'il un éventuel refactoring futur avec une autre implémentation concrète plus difficile. A défaut d'une raison valable, l'utilisation des classes abstraites est recommandée.</p>",
	"RE_POSSIBLE_UNINTENDED_PATTERN":                           "\".\" utilisé dans une expression régulière\n\n<p>Une fonction <code>String</code> attendant une expression régulière reçoit \".\" en paramètre. Est-ce voulu ? Par exemple, <code>s.replaceAll(\".\", \"/\")</code> renverra une chaine dont <b>chaque</b> caractère aura été remplacé par le caractère '/'.</p>",
	"RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION":                     "Syntaxe d'expression régulière invalide\n\n<p>Le code utilise une expression régulière qui est invalide selon la syntaxe des expressions régulières. Lors de l'exécution, une exception <code>PatternSyntaxException</code> sera lancée.</p>",
	"DLS_OVERWRITTEN_INCREMENT":                                "Incrémentation annulée\n\n<p>Ce code incrémente une valeur (ex., <code>i++</code>) et en annule immédiatement l'effet. Par exemple, <code>i = i++</code> réécrit de façon immédiate la valeur incrémentée avec la valeur originale.</p>",
	"ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT":                  "Décalage à droite non signé et transtypage short/byte\n\n<p>Le code effectue un décalage à droite non signé, dont le résultat est transtypé vers un <code>short</code> ou un <code>byte</code>, ce qui élimine les bits supérieurs du résultat. Puisque les bits supérieurs sont éliminés, il peut ne pas y avoir de différence entre un décalage à droite signé ou non signé (ceci dépend de la taille du décalage)</p>",
	"ICAST_BAD_SHIFT_AMOUNT":                                   "Décalage d'un int hors de proportion (0..31)\n\n<p>Un décalage de n bits est effectué avec n hors des limites (0..31). Ceci résulte en l'utilisation des 5 bits inférieurs de l'entier pour décider de la valeur du décalage. Ce n'est sans doute pas l'effet recherché et est pour le moins source de confusion.</p>",
	"IM_MULTIPLYING_RESULT_OF_IREM":                            "Multiplication d'un entier avec le résulat entier d'un modulo\n\n<p>Ce code mutilplie le résultat d'un modulo avec une constante entière. Faîtes attention à la précédence des opérateurs. Par exemple, <code>i % 60 * 1000</code> correspond à <code>(i % 60) * 1000</code>, non à <code>i % (60 * 1000)</code>.</p>",
	"DMI_INVOKING_TOSTRING_ON_ARRAY":                           "Invocation de toString sur un tableau\n\n<p>Le code invoque <code>toString</code> sur un tableau, ce qui va générer un résultat assez inutile du genre <code>[C@16f0472</code>. Envisagez d'utiliser <code>String.valueOf</code> pour convertir un tableau en une chaine lisible contenant les valeurs du tableau. Cf Programming Puzzlers, chapitre 3, problème 12.</p>",
	"IM_AVERAGE_COMPUTATION_COULD_OVERFLOW":                    "Possibilité de débordement du calcul d'une moyenne\n\n<p>Le code calcule la moyenne de deux entiers au moyen d'une division ou d'un décalage signé vers la droite, puis utilise le résultat comme indice d'un tableau. Si les valeurs moyennées sont très grandes, le calcul peut déborder (résultant en un très grand négatif). En supposant que le résultat doive toujours être positif, vous devriez plutôt utiliser un décalage à droite non signé. En d'autres termes, utilisez plutôt  <code>(low+high) &gt;&gt;&gt; 1</code> au lieu de <code>(low+high)/2</code>.</p>\n<p>Le bug existe dans de nombreuses implémentations des recherches binaires et des tris fusion. Martin Buchholz <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6412541\"> l'a recherché et corrigé </a> dans les librairies du JDK et Joshua Bloch <a href=\"http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\"> a largement publié ce modèle de bug</a>.</p>",
	"IM_BAD_CHECK_FOR_ODD":                                     "Test d'impaire ne fonctionnant pas avec les négatifs\n\n<p>Le code utilise <code>x % 2 == 1</code> pour véifier si une valeur est impaire, mais cela ne fonctionera pas avec une valeur négative (Ex. : <code>(-5) % 2 == -1</code>). Si ce code doit tester si une valeur est impaire, envisagez d'utiliser <code>x & 1 == 1</code> ou <code>x % 2 != 0</code>.</p>",
	"DMI_HARDCODED_ABSOLUTE_FILENAME":                          "Chemin absolu codé en dur dans le code\n\n<p>Ce code construit un objet <code>File</code> en utilisant un chemin absolu de fichier codé en dur (Ex. : <code>new File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");)</code>.</p>",
	"DMI_BAD_MONTH":                                            "Valeur constante pour un mois en dehors de l'intervalle attendu de 0 à 11\n\n<p>Ce code passe une constante mois en dehors de l'intervalle de 0 à 11.</p>",
	"DMI_USELESS_SUBSTRING":                                    "Appel de substring(0) qui retourne la valeur originale\n\n<p>Ce code appelle <code>substring(0)</code> sur une chaine, ce qui renvoit la valeur originale.</p>",
	"DMI_CALLING_NEXT_FROM_HASNEXT":                            "Méthode hasNext() appelant next()\n\n<p>La méthode <code>hasNext()</code> appelle la méthode <code>next()</code>. C'est très probablement faux puisque la méthode <code>hasNext()</code> n'est pas changer l'état de l'itérateur tandis que la méthode <code>next()</code> doit changer cet état.</p>",
	"SWL_SLEEP_WITH_LOCK_HELD":                                 "Appel de la méthode Thread.sleep() avec un verrou\n\n<p>Cette méthode appelle <code>Thread.sleep()</code> en tenant un verrou. Ceci peut résulter en de faibles performances, peu de capacité à monter en charge ou un inter-blocage puisque d'autres processus pourraient être en attente du verrou. C'est une meilleure idée d'appeler <code>wait()</code> sur le verrou, afin de le libérer et de permettre à d'autre processus de tourner.</p>",
	"DB_DUPLICATE_BRANCHES":                                    "Méthode utilisant le même code pour deux branches\n\n<p>Cette méthode utilise le même code pour implémenter deux branches d'une condition. Vérifiez pour vous assurer que ce n'est pas une erreur de codage.</p>",
	"DB_DUPLICATE_SWITCH_CLAUSES":                              "Méthode utilisant le même code pour deux clauses switch\n\n<p>Cette méthode utilise le même code pour implémenter deux cas différents d'un <code>switch</code>. Ce peut être normal mais il vaut mieux vérifier que ce n'est pas une erreur de codage.</p>",
	"IMA_INEFFICIENT_MEMBER_ACCESS":                            "Accès à un membre privé de la classe englobante\n\n<p>Cette méthode de classe interne lit ou écrit dans un membre privé de sa classe englobante, ou appelle une méthode privée de cette classe englobante. Le compilateur doit générer dans ce cas une méthode spéciale pour accèder à ce membre privé, ce qui rend l'accès moins efficace. Dégrader la protection du membre ou de la méthode permettrait au compilateur de traiter normalement cet accès.</p>",
	"XFB_XML_FACTORY_BYPASS":                                   "Méthode instanciant directement une implémentation spécifique des interfaces XML\n\n<p>Cette méthode instancie une implémentation spécifique de l'interface XML. Il est préférable d'utiliser les classes 'Factory' fournies pour créer ces objets, ce qui permet de changer d'implémentation à l'exécution. Pour des détails, cf. :</p>\n<p>\n<ul>\n <li>javax.xml.parsers.DocumentBuilderFactory</li>\n <li>javax.xml.parsers.SAXParserFactory</li>\n <li>javax.xml.transform.TransformerFactory</li>\n <li>org.w3c.dom.Document.create<i>XXXX</i></li>\n</ul>\n</p>",
	"USM_USELESS_SUBCLASS_METHOD":                              "Méthode délégant de manière superflue à une méthode mère\n\n<p>Cette méthode dérivée se limite à transmettre l'appel à sa méthode mère sans modifier les paramètres reçus. Cette méthode peut être supprimée car elle n'apporte aucune valeur ajoutée.</p>",
	"USM_USELESS_ABSTRACT_METHOD":                              "Méthode abstraite {1} déjà définie dans l'interface implémentée\n\n<p>Cette méthode abstraite est déjà définie dans une interface qui est implémentée par cette classe abstraite. Cette méthode peut être supprimée puisqu'elle n'apporte aucune valeur ajoutée.</p>",
	"CI_CONFUSED_INHERITANCE":                                  "Classe finale déclarant un champ protégé\n\n<p>Cette classe est déclarée <code>final</code> mais comporte des champs <code>protected</code>. Cette classe étant finale, elle ne pourra jamais être dérivée et donc l'utilisation de <code>protected</code> est troublante. Le modificateur d'accès devrait être modifié à <code>private</code> ou <code>public</code> pour mettre en évidence la véritable utilisation du champ.</p>",
	"QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT":                      "Méthode assignant une valeur boléenne fixe dans une expression booléenne\n\n<p>Cette méthode assigne une valeur booléenne fixe (<code>true</code> ou <code>false</code>) à une variable booléenne dans une expression <code>if</code> ou <code>while</code>. Il est probable que le but était d'effectuer une comparaison booléenne utilisant <code>==</code> et non pas une affectation avec <code>=</code>.</p>",
	"VR_UNRESOLVABLE_REFERENCE":                                "Classe faisant une référence à une classe ou méthode non résolue\n\n<p>Cette classe fait une référence à une classe ou une méthode qui ne peut pas être résolue dans l'ensemble des librairies qui ont été analysées en même temps.</p>",
}
